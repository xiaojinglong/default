/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50617
Source Host           : localhost:3306
Source Database       : xiaojinglong

Target Server Type    : MYSQL
Target Server Version : 50617
File Encoding         : 65001

Date: 2017-04-13 14:30:36
*/

SET FOREIGN_KEY_CHECKS=0;
-- ----------------------------
-- Table structure for `xjl_access`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_access`;
CREATE TABLE `xjl_access` (
  `role_id` smallint(6) unsigned NOT NULL,
  `node_id` smallint(6) unsigned NOT NULL,
  `level` tinyint(1) NOT NULL,
  `module` varchar(50) DEFAULT NULL,
  KEY `groupId` (`role_id`),
  KEY `nodeId` (`node_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of xjl_access
-- ----------------------------
INSERT INTO `xjl_access` VALUES ('3', '31', '2', null);
INSERT INTO `xjl_access` VALUES ('1', '23', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '22', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '21', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '20', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '31', '2', null);
INSERT INTO `xjl_access` VALUES ('3', '2', '1', null);
INSERT INTO `xjl_access` VALUES ('3', '17', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '31', '2', null);
INSERT INTO `xjl_access` VALUES ('1', '2', '1', null);
INSERT INTO `xjl_access` VALUES ('3', '16', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '15', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '14', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '13', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '12', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '11', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '10', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '9', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '5', '2', null);
INSERT INTO `xjl_access` VALUES ('3', '6', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '7', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '8', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '4', '2', null);
INSERT INTO `xjl_access` VALUES ('3', '33', '3', null);
INSERT INTO `xjl_access` VALUES ('3', '32', '2', null);
INSERT INTO `xjl_access` VALUES ('3', '1', '1', null);
INSERT INTO `xjl_access` VALUES ('2', '2', '1', null);
INSERT INTO `xjl_access` VALUES ('2', '17', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '16', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '15', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '19', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '35', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '18', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '34', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '3', '2', null);
INSERT INTO `xjl_access` VALUES ('1', '17', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '16', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '14', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '13', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '12', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '11', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '10', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '9', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '5', '2', null);
INSERT INTO `xjl_access` VALUES ('2', '6', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '7', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '8', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '4', '2', null);
INSERT INTO `xjl_access` VALUES ('2', '33', '3', null);
INSERT INTO `xjl_access` VALUES ('2', '32', '2', null);
INSERT INTO `xjl_access` VALUES ('2', '1', '1', null);
INSERT INTO `xjl_access` VALUES ('1', '15', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '14', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '13', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '12', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '11', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '10', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '9', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '5', '2', null);
INSERT INTO `xjl_access` VALUES ('1', '6', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '7', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '8', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '4', '2', null);
INSERT INTO `xjl_access` VALUES ('1', '30', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '29', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '28', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '27', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '26', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '25', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '24', '2', null);
INSERT INTO `xjl_access` VALUES ('1', '33', '3', null);
INSERT INTO `xjl_access` VALUES ('1', '32', '2', null);
INSERT INTO `xjl_access` VALUES ('1', '1', '1', null);

-- ----------------------------
-- Table structure for `xjl_admins`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_admins`;
CREATE TABLE `xjl_admins` (
  `uid` int(10) NOT NULL AUTO_INCREMENT,
  `uname` varchar(20) CHARACTER SET utf8 NOT NULL,
  `password` varchar(50) CHARACTER SET utf8 NOT NULL,
  `randnum` int(5) NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of xjl_admins
-- ----------------------------
INSERT INTO `xjl_admins` VALUES ('1', 'xjladmin', 'ddc9d74c305f17a9f97067b4dc26a68c', '1234', '1');
INSERT INTO `xjl_admins` VALUES ('2', 'test', 'ddc9d74c305f17a9f97067b4dc26a68c', '1234', '1');
INSERT INTO `xjl_admins` VALUES ('3', 'admin', 'ddc9d74c305f17a9f97067b4dc26a68c', '1234', '1');
INSERT INTO `xjl_admins` VALUES ('4', 'editor', 'ddc9d74c305f17a9f97067b4dc26a68c', '1234', '1');

-- ----------------------------
-- Table structure for `xjl_article`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_article`;
CREATE TABLE `xjl_article` (
  `aid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `content` text CHARACTER SET utf8,
  `cid` int(10) NOT NULL,
  `author` varchar(50) CHARACTER SET utf8 NOT NULL,
  `time` int(10) NOT NULL,
  `thumb` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `isshow` tinyint(1) NOT NULL DEFAULT '1',
  `click` int(10) NOT NULL DEFAULT '0',
  `zan` int(10) DEFAULT '1',
  `cai` int(10) DEFAULT '1',
  PRIMARY KEY (`aid`),
  KEY `click` (`click`)
) ENGINE=InnoDB AUTO_INCREMENT=65 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of xjl_article
-- ----------------------------
INSERT INTO `xjl_article` VALUES ('47', '程序员：放下技术情节，与你的同伴一起进步', '&lt;p&gt;&amp;nbsp;&amp;nbsp;如果说掌握一门赖以生计的技术是技术人员要学会的第一课的话， 那么， 我觉得， 技术人员要真正学会的第二课，不是技术，而是业务、交流与协作，学会关心其他工作伙伴的工作情况和进展。为什么这么说呢？ 因为技术人员太容易陷入“孤岛”状态，更注重自己的工作任务的完成，忽视其他工作伙伴的工作，甚至一无所知。 我就一直犯这样的错误。我敢说，对内心我还是比较明白清楚的，但是对外面所发生的事情实在是知之甚少，这不是好的状态。 一个开明、开放的程序员不应该囿于自己狭隘的小天地，而是更广阔地去看待工作和职业，和同伴一起进步和成功。为什么要关心业务？ &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;很多技术人员都立志成为系统架构师， 那是编程领域的“圣杯级职业”。问题是， 系统架构本身是为了业务需求和扩展而服务的，必须充分理解业务需求和未来的发展趋势，深入理解系统所涉及的数据及分布， 才能作出更可靠的设计决策。如果对业务知之甚少，以为仅靠书上说的那一套，或者以前的零碎经验，就能够胜任的话，那这个项目多半要失败的。 因此，即使立志要成为系统架构师，也要对业务有很深的理解。其次， 技术的发挥必须有用武之地。如果没有足够强度和有挑战性的业务需求和扩展， 足够多的问题的磨炼，技术的提升又从何谈起？ 仅仅靠阅读那些技术书籍吗？ 那只能提供一个指导的作用罢了；真正还是要在实战中得到提高。 &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 如果一个技术人员对业务不感兴趣，只对技术感兴趣， 那会发生什么事情呢？ 他将只能满足于使用自己所熟悉的技术去完成上面分派下来的任务； 也许今天是做一个系统A， 明天是做另外一个类似的系统B。 他对系统涉及的各种业务都不甚了解，也不清楚行业领域的发展状况， 就只能局限于使用技术来做各种具体的功能，无法提出中肯的建议。他的职业发展将严重耦合于所掌握的技术。如果该技术保持比较长久的生命力，那么， 他还能兵来将挡水来土淹， 但无论如何，也只能局限于成为这门技术的“高级工程师”而已；如果该技术开始被淘汰，那就悲剧了。 &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;換一种方式。如果一个技术人员很关心业务。 那么，经过一段时间的磨练之后，他能够提出中肯的意见，知晓行业领域的发展状况， 在深入理解业务的基础上，同时发展相应的技术专长， 做一个在业务和技术方面并行发展的技术人员。 他的职业发展将不是完全耦合于特定的某种开发技术，而具备了更大的灵活性。你知道吗？ 三国时期，我最佩服的是徐元直先生。 他是一个技术和业务同样精通的人才； 技术方面， 作战思想丰富， 业务方面， 实际指挥作战和应变能力都很强， 这样的人才， 难怪即使不献一策， 曹操这样的人物也愿意留他在帐下， 让他无功受禄，—— 能够不让他为竞争对手所用就已经是大功一件了。 &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 放下技术情结 &amp;nbsp; 技术人员要学会放下心中的“技术情结”。 因为我也是技术人员，也有技术崇拜的倾向， 也能够感受到这种情结带来的益处和束缚。 “技术情结” 表现在哪里呢？ 你期望能够尽可能多尽可能深入地掌握各种技术，这给你带来一种很好的安全感，因为有了强有力的依靠，—— 你对自己的能力充分自信； 但也束缚了一个人的发展： 他的内心容易更加依赖于自己的能力，而对别人的能力抱有怀疑，难以与别人形成优势互补和良好搭档，很难发挥出超出自己能力的能量。是的， 你学了 C, java, python , Lisp , ...., &amp;nbsp;还可以列出更长，你还想掌握并发编程，软件架构等等，你的同事却只会C， java 或 python , &amp;nbsp;会敲入一些命令， 这样你就舒服了吗？ 感到优越了吗？ 高枕无忧了吗？ &amp;nbsp;成为核心骨干了吗？技术是学无止境的， 一个人的精力却有限，就算一个人在某个领域里非常精通，那么同时也可能意味着这个人在其它方面是孤陋寡闻，“技术牛人” 和 “科学大师” 一样， 可能只是一个美妙的光环，是程序员给自己套上的铁链。不要妄想一揽子全抓在手里， 确立自己的专长， 善于与别人优势互补，良好协作才是。敢于舍弃 “技术情结” 给自己带来的安全感， 才能走出更广阔的空间。 &amp;nbsp;技术人员的通病 &amp;nbsp; 大多数技术人员，包括我在内， 都不甚明了自己究竟能够利用计算机做什么。 我们只是年复一年日复一日地学习和使用某种编程语言和技术来写程序，以为这就是利用计算机的唯一的正统方式。你用过MATLAB吗， 一种很强悍的科学计算软件？ 那里一条命令， 就顶一个编程人员几个月的努力。作为一名计算机专业人士， 学习了那么多专业知识，难道仅仅只是为了掌握一两门编程语言和技术来写点程序养家糊口吗？ &amp;nbsp;如果一个程序员懂得去使用一些专业软件，学习一些信息处理、统计分析方法， 那么， 他所能提供的价值可能远远超过一个普通开发者所能提供的价值。具备编程能力和对编程技术的领悟，是技术人员拥有的特别优势， 但并不意味着一个技术人员能够干的活就只是编程。只是，大多数技术人员，由于各种原因，就把自己定位在一名普通的程序开发人员身上， 跳不出“开发人员”的视角。 &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;我们总是沉迷于重新发明轮子，以及被迫重新发明轮子，用不同的编程语言，或者用同一套技术框架，搭完了管理系统ABCDEFG，再搭HIJKLMN，以及OPQRSTUVWXYZ， 感觉很有成就感吧？ 不懂尊重和利用别人已有的工作成果，低水平重复建设，耗费大量的时间、精力、人力和资源成本去做那些没有太大意义的事情； 总是沉迷于争论语言、技术之间的孰优孰劣，却甚少关心哪些事当做不当做，甚少关心做那些关键重要的事情有哪些方案以及孰优孰劣；总是沉迷于某款科技产品的宣传和特性，甚少关心环境问题和儿童失学问题，如果说程序员有什么可怜可恨之处，那绝对不在于这一族自甘被孤立，难以为人所理解， 而在于他们自身的心态就将自己锁在了井底之中，还自以为很与众不同。 &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 假设你不再为公司编程，而为自己写程序， 你知道自己该干些什么吗？ 你会感到迷茫吗？ 如果我们连自己该干什么能干什么都不清楚， 那么徒有一身武艺，又有什么用呢？大多数技术人员，包括我在内，都还不懂得主动与工作伙伴良好协作，只是因为工作关系而不自觉地交流和协作。不信，在你工作之余的时候，你会主动邀请别人一起来编程，共同去做一个有用的产品， &amp;nbsp;还是埋头去学习技术，孤立地去做一些技术实验，来掌握所谓的某门开发技术？ &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;一个技术人员对于另一个技术人员的认可往往起始于对其技术能力的是否认可。技术人员面试的时候通常会更关注： 他掌握了哪些技术？ 对这些技术的掌握程度如何？ &amp;nbsp;而不是这个人利用自己的技术能力和所学做了哪些影响卓著的事情。这就导致了： 技术人员往往更关注自己的技术能力的发展，而忽视其他能力的培养。 &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;因此，大多数技术人员，包括我在内， 都有四个通病： 一，不清楚自己究竟能够利用计算机做什么，不懂得如何充分利用计算机的真正威力； 二. &amp;nbsp;不能主动与别人优势互补和良好协作； 三。放不下技术情结； 四. &amp;nbsp;局限于狭隘的自我优越感，以及伴随而生的强迫症。这四个通病导致一个人永远局限于只见一叶不见林的狭隘视角。 &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;作为一名技术人员，你对公司的业务发展能够提出自己的建议吗？ 你有能力说服工作伙伴和主管来采纳你的提议吗？ 能够集思广益，融众人之所长吗？ 我认为，一个真正优秀的技术人才，应当具备这种多方面的能力，除了技术专长，他具备说服能力，集思广益， 能够有力地推动事情的发展。企业也应当提供机会，让技术人员参与更广阔的工作，而不仅仅是写代码和完成需求功能。 &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;我相信，从企业聘用人才的角度来说，它们更看重一名技术人才究竟产生了怎样的影响。只是当大量技术人员没有什么可证明自己做过有影响力的事情的情况下，才不得不求其次，去聘用那些在技术能力上有更高造诣的技术人员； 从技术人员的角度来说，因为他没有什么可以证明自己确实做过有影响力的事情，只好倚靠有限的技术水平为自己寻一个差强人意的安身之所。我觉得， 那些没有做过有影响力的事情的技术人员，相比那些利用自己所学做过有价值的事情的人来说，其职业高度就已经低了一个档次，尽管后者可能在技术能力上要差一些。 &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;事实上，我敢断言： 中国不缺技术能力优秀的人才，虽然技术级别与国外还差一两个档次， 但还是人才济济的。确实有很多人依然努力成为最好的技术人才，致力于引进国外先进技术。中国缺少的是那些懂得利用计算机能力创造价值、服务和效益的技术人才。 这种技术人才必须能够放下技术情结，以更开放、开明的心态去与其他的人良好协作，优势互补， 一个真正优秀的产品往往是多个人共同协作完成，孤胆英雄的年代已经过去。即便是一个黑客，如果他能与另一个黑客强强联合， 也能产生出比自己一个人更强大的能量。要知道，苹果至少也是由乔布斯和沃兹尼亚克两个人初创起来的。 &amp;nbsp; &amp;nbsp; &amp;nbsp;要一起进步和成功 &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;最后， 如果一个技术人员通过重重磨难终于成为了很牛级的人物，而他的亲友早已埋没于尘世中，过着一般的日子， 他的成功又有多大意义呢？ 应该聚合所有人的才智和经验，一起创造共赢的结局才对，缺了谁都不行。人生苦短，正是因为一路上有了亲友的陪伴， 才不会寂寞， 人生才不至于苍白。不要只顾着自己一个人往前走路， 把亲友们抛在看不见的后面。&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 转自：http://www.chinaz.com/news/2013/0723/310508.shtml&lt;/p&gt;', '43', '小静龙', '1472635819', './Uploads/article/20160722/5791b821ae425.jpeg', '1', '0', '7', '0');
INSERT INTO `xjl_article` VALUES ('48', 'Redis快速入门', '&lt;p&gt;Redis 有三个主要使其有别于其它很多竞争对手的特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Redis是完全在内存中保存数据的数据库，使用磁盘只是为了持久性目的；&amp;nbsp;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Redis相比许多键值数据存储系统有相对丰富的数据类型；&amp;nbsp;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Redis可以将数据复制到任意数量的从服务器中；&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20160811/1470923010304773.png&quot; title=&quot;1470923010304773.png&quot; alt=&quot;d48a518ec9833b12.png&quot; width=&quot;364&quot; height=&quot;223&quot;/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Redis优点&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;异常快速&amp;nbsp;:&amp;nbsp;Redis是非常快的，每秒可以执行大约110000设置操作，81000个/每秒的读取操作。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持丰富的数据类型&amp;nbsp;:&amp;nbsp;Redis支持最大多数开发人员已经知道如列表，集合，可排序集合，哈希等数据类型。&lt;/p&gt;&lt;p&gt;这使得在应用中很容易解决的各种问题，因为我们知道哪些问题处理使用哪种数据类型更好解决。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;操作都是原子的&amp;nbsp;:&amp;nbsp;所有&amp;nbsp;Redis&amp;nbsp;的操作都是原子，从而确保当两个客户同时访问&amp;nbsp;Redis&amp;nbsp;服务器得到的是更新后的值（最新值）。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;MultiUtility工具：Redis是一个多功能实用工具，可以在很多如：缓存，消息传递队列中使用（Redis原生支持发布/订阅），在应用程序中，如：Web应用程序会话，网站页面点击数等任何短暂的数据；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Redis环境安装&lt;/h2&gt;&lt;p&gt;在 Ubuntu 上安装&amp;nbsp;Redis，打开终端，然后输入以下命令：&lt;/p&gt;&lt;pre&gt;$sudo&amp;nbsp;apt-get&amp;nbsp;update\n$sudo&amp;nbsp;apt-get&amp;nbsp;install&amp;nbsp;redis-server&lt;/pre&gt;&lt;p&gt;这将在您的计算机上安装Redis&lt;/p&gt;&lt;p&gt;启动 Redis&lt;/p&gt;&lt;pre&gt;$redis-server&lt;/pre&gt;&lt;p&gt;查看 redis 是否还在运行&lt;/p&gt;&lt;pre&gt;$redis-cli&lt;/pre&gt;&lt;p&gt;这将打开一个 Redis 提示符，如下图所示：&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&lt;/pre&gt;&lt;p&gt;在上面的提示信息中：127.0.0.1&amp;nbsp;是本机的IP地址，6379是&amp;nbsp;Redis&amp;nbsp;服务器运行的端口。现在输入&amp;nbsp;PING&amp;nbsp;命令，如下图所示：&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ping\nPONG&lt;/pre&gt;&lt;p&gt;这说明现在你已经成功地在计算机上安装了&amp;nbsp;Redis。&lt;/p&gt;&lt;h2&gt;&lt;p&gt;在Ubuntu上安装Redis桌面管理器&lt;/p&gt;&lt;/h2&gt;&lt;p&gt;要在Ubuntu&amp;nbsp;上安装&amp;nbsp;Redis桌面管理，可以从&amp;nbsp;&lt;a href=&quot;http://redisdesktop.com/download&quot;&gt;http://redisdesktop.com/download&lt;/a&gt;&amp;nbsp;下载包并安装它。&lt;/p&gt;&lt;p&gt;Redis&amp;nbsp;桌面管理器会给你用户界面来管理&amp;nbsp;Redis&amp;nbsp;键和数据。&lt;/p&gt;&lt;h2&gt;Redis数据类型&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;支持5种数据类型，说明如下：&lt;/p&gt;&lt;h2&gt;字符串&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;字符串是一个字节序列。在&amp;nbsp;Redis&amp;nbsp;中字符串是二进制安全的，这意味着它们没有任何特殊终端字符来确定长度，所以可以存储任何长度为&amp;nbsp;512&amp;nbsp;兆的字符串。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SET&amp;nbsp;name&amp;nbsp;&amp;quot;yiibai&amp;quot;\nOK\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;GET&amp;nbsp;name\n&amp;quot;yiibai&amp;quot;&lt;/pre&gt;&lt;p&gt;在上面的例子中，SET&amp;nbsp;和&amp;nbsp;GET&amp;nbsp;是&amp;nbsp;Redis&amp;nbsp;命令，name&amp;nbsp;和&amp;nbsp;&amp;quot;yiibai&amp;quot;&amp;nbsp;是存储在&amp;nbsp;Redis&amp;nbsp;的键和字符串值。&lt;/p&gt;&lt;h2&gt;哈希&lt;/h2&gt;&lt;p&gt;Redis哈希是键值对的集合。&amp;nbsp;Redis哈希是字符串字段和字符串值之间的映射，所以它们用来表示对象。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;HMSET&amp;nbsp;user:1&amp;nbsp;username&amp;nbsp;yiibai&amp;nbsp;password&amp;nbsp;yiibai&amp;nbsp;points&amp;nbsp;200\nOK\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;HGETALL&amp;nbsp;user:1\n\n1)&amp;nbsp;&amp;quot;username&amp;quot;\n2)&amp;nbsp;&amp;quot;yiibai&amp;quot;\n3)&amp;nbsp;&amp;quot;password&amp;quot;\n4)&amp;nbsp;&amp;quot;yiibai&amp;quot;\n5)&amp;nbsp;&amp;quot;points&amp;quot;\n6)&amp;nbsp;&amp;quot;200&amp;quot;&lt;/pre&gt;&lt;p&gt;在上面的例子中，哈希数据类型用于存储包含用户基本信息的用户对象。这里 HSET，HEXTALL 是 Redis 命令同时&amp;nbsp;user:1&amp;nbsp;也是一个键。&lt;/p&gt;&lt;h2&gt;列表&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;列表是简单的字符串列表，通过插入顺序排序。可以添加一个元素到&amp;nbsp;Redis&amp;nbsp;列表的头部或尾部。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;lpush&amp;nbsp;tutoriallist&amp;nbsp;redis\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;lpush&amp;nbsp;tutoriallist&amp;nbsp;mongodb\n(integer)&amp;nbsp;2\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;lpush&amp;nbsp;tutoriallist&amp;nbsp;rabitmq\n(integer)&amp;nbsp;3\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;lrange&amp;nbsp;tutoriallist&amp;nbsp;0&amp;nbsp;10\n\n1)&amp;nbsp;&amp;quot;rabitmq&amp;quot;\n2)&amp;nbsp;&amp;quot;mongodb&amp;quot;\n3)&amp;nbsp;&amp;quot;redis&amp;quot;&lt;/pre&gt;&lt;p&gt;列表的最大长度为&amp;nbsp;&amp;nbsp;232&amp;nbsp;- 1&amp;nbsp;个元素（4294967295，每个列表的元素超过四十亿）。&lt;/p&gt;&lt;h2&gt;集合&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;集合是字符串的无序集合。在&amp;nbsp;Redis&amp;nbsp;可以添加，删除和测试成员存在的时间复杂度为&amp;nbsp;O（1）。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;sadd&amp;nbsp;tutoriallist&amp;nbsp;redis\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;sadd&amp;nbsp;tutoriallist&amp;nbsp;mongodb\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;sadd&amp;nbsp;tutoriallist&amp;nbsp;rabitmq\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;sadd&amp;nbsp;tutoriallist&amp;nbsp;rabitmq\n(integer)&amp;nbsp;0\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;smembers&amp;nbsp;tutoriallist\n\n1)&amp;nbsp;&amp;quot;rabitmq&amp;quot;\n2)&amp;nbsp;&amp;quot;mongodb&amp;quot;\n3)&amp;nbsp;&amp;quot;redis&amp;quot;&lt;/pre&gt;&lt;p&gt;注：在上面的例子中&amp;nbsp;rabitmq&amp;nbsp;被添加两次，但由于它是只集合具有唯一特性。集合中的成员最大数量为&amp;nbsp;232&amp;nbsp;- 1（4294967295，每个集合有超过四十亿条记录）。&lt;/p&gt;&lt;h2&gt;集合排序&lt;/h2&gt;&lt;p&gt;不同的是，一个有序集合的每个成员都可以排序，就是为了按有序集合排序获取它们，按权重分值从最小到最大排序。虽然成员都是独一无二的，按权重分数值可能会重复。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;zadd&amp;nbsp;tutoriallist&amp;nbsp;0&amp;nbsp;redis\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;zadd&amp;nbsp;tutoriallist&amp;nbsp;0&amp;nbsp;mongodb\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;zadd&amp;nbsp;tutoriallist&amp;nbsp;0&amp;nbsp;rabitmq\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;zadd&amp;nbsp;tutoriallist&amp;nbsp;0&amp;nbsp;rabitmq\n(integer)&amp;nbsp;0\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ZRANGEBYSCORE&amp;nbsp;tutoriallist&amp;nbsp;0&amp;nbsp;1000\n\n1)&amp;nbsp;&amp;quot;redis&amp;quot;\n2)&amp;nbsp;&amp;quot;mongodb&amp;quot;\n3)&amp;nbsp;&amp;quot;rabitmq&amp;quot;&lt;/pre&gt;&lt;h2&gt;Redis键&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;中的&amp;nbsp;keys&amp;nbsp;命令用于管理&amp;nbsp;redis&amp;nbsp;中的键。Redis&amp;nbsp;keys命令使用的语法如下所示：&lt;/p&gt;&lt;h2&gt;语法&lt;/h2&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;COMMAND&amp;nbsp;KEY_NAME&lt;/pre&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SET&amp;nbsp;yiibai&amp;nbsp;redis\nOK\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;DEL&amp;nbsp;yiibai\n(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p&gt;在上面的例子中&amp;nbsp;DEL&amp;nbsp;是一个命令，而&amp;nbsp;yiibai&amp;nbsp;是一个键。如果键被成功删除，则该命令的输出将是（整数）1，否则这将是（整数）0；&lt;/p&gt;&lt;h2&gt;Redis字符串&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;的字符串命令用于管理&amp;nbsp;redis&amp;nbsp;的字符串值。Redis&amp;nbsp;的字符串命令语法的使用如下所示：&lt;/p&gt;&lt;h2&gt;语法&lt;/h2&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;COMMAND&amp;nbsp;KEY_NAME&lt;/pre&gt;&lt;h2&gt;示例&lt;/h2&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SET&amp;nbsp;yiibai&amp;nbsp;redis\nOK\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;GET&amp;nbsp;yiibai\n&amp;quot;redis&amp;quot;&lt;/pre&gt;&lt;p&gt;在上面示例中&amp;nbsp;SET&amp;nbsp;和&amp;nbsp;GET&amp;nbsp;是&amp;nbsp;Redis&amp;nbsp;的命令，这里&amp;nbsp;yiibai&amp;nbsp;就是一个键（key）；&lt;/p&gt;&lt;h2&gt;Redis哈希&lt;/h2&gt;&lt;p&gt;Redis哈希是字符串字段和字符串值之间的映射，所以它是用来表示对象的一个完美的数据类型，Redis&amp;nbsp;的哈希值最多可存储超过4十亿字段-值对。&lt;/p&gt;&lt;h2&gt;示例&lt;/h2&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;HMSET&amp;nbsp;yiibai&amp;nbsp;name&amp;nbsp;&amp;quot;redis&amp;nbsp;tutorial&amp;quot;&amp;nbsp;description&amp;nbsp;&amp;quot;redis&amp;nbsp;basic&amp;nbsp;commands&amp;nbsp;for&amp;nbsp;caching&amp;quot;&amp;nbsp;likes&amp;nbsp;20&amp;nbsp;visitors&amp;nbsp;23000\nOK\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;HGETALL&amp;nbsp;yiibai\n\n1)&amp;nbsp;&amp;quot;name&amp;quot;\n2)&amp;nbsp;&amp;quot;redis&amp;nbsp;tutorial&amp;quot;\n3)&amp;nbsp;&amp;quot;description&amp;quot;\n4)&amp;nbsp;&amp;quot;redis&amp;nbsp;basic&amp;nbsp;commands&amp;nbsp;for&amp;nbsp;caching&amp;quot;\n5)&amp;nbsp;&amp;quot;likes&amp;quot;\n6)&amp;nbsp;&amp;quot;20&amp;quot;\n7)&amp;nbsp;&amp;quot;visitors&amp;quot;\n8)&amp;nbsp;&amp;quot;23000&amp;quot;&lt;/pre&gt;&lt;p&gt;在上面的例子，我们在设置一个名为&amp;nbsp;yiibai&amp;nbsp;Redis的哈希的教程详细信息（name,&amp;nbsp;description,&amp;nbsp;likes,&amp;nbsp;visitors）。&lt;/p&gt;&lt;h2&gt;Redis列表&lt;/h2&gt;&lt;p&gt;Redis列表是简单的字符串列表，通过插入顺序排序。您可以在Redis&amp;nbsp;列表的头或列表尾添加元素。列表的最大长度为&amp;nbsp;&amp;nbsp;232&amp;nbsp;- 1&amp;nbsp;个元素（4294967295，每个列表可有超过四十亿个元素）。&lt;/p&gt;&lt;h2&gt;示例&lt;/h2&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;LPUSH&amp;nbsp;tutorials&amp;nbsp;redis\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;LPUSH&amp;nbsp;tutorials&amp;nbsp;mongodb\n(integer)&amp;nbsp;2\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;LPUSH&amp;nbsp;tutorials&amp;nbsp;mysql\n(integer)&amp;nbsp;3\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;LRANGE&amp;nbsp;tutorials&amp;nbsp;0&amp;nbsp;10\n\n1)&amp;nbsp;&amp;quot;mysql&amp;quot;\n2)&amp;nbsp;&amp;quot;mongodb&amp;quot;\n3)&amp;nbsp;&amp;quot;redis&amp;quot;&lt;/pre&gt;&lt;p&gt;在上面的例子中的三个值由命令LPUSH&amp;nbsp;插入到&amp;nbsp;redis&amp;nbsp;名称为&amp;nbsp;tutorials&amp;nbsp;的列表。&lt;/p&gt;&lt;h2&gt;Redis集合&lt;/h2&gt;&lt;p&gt;Redis集合是唯一字符串的无序集合。唯一集合是不允许数据有重复的键的。在&amp;nbsp;Redis&amp;nbsp;集合中添加，删除和测试成会是否存的时间复杂度为O（1）（恒定的时间，无论集合内包含元素的数量）。集合的最大长度为&amp;nbsp;&amp;nbsp;&amp;nbsp;232&amp;nbsp;- 1&amp;nbsp;个元素（4294967295，每个集合中超过四十亿个元素）。&lt;/p&gt;&lt;h2&gt;示例&lt;/h2&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SADD&amp;nbsp;yiibai&amp;nbsp;redis\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SADD&amp;nbsp;yiibai&amp;nbsp;mongodb\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SADD&amp;nbsp;yiibai&amp;nbsp;mysql\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SADD&amp;nbsp;yiibai&amp;nbsp;mysql\n(integer)&amp;nbsp;0\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SMEMBERS&amp;nbsp;yiibai\n\n1)&amp;nbsp;&amp;quot;mysql&amp;quot;\n2)&amp;nbsp;&amp;quot;mongodb&amp;quot;\n3)&amp;nbsp;&amp;quot;redis&amp;quot;&lt;/pre&gt;&lt;p&gt;在上面的例子中的三个值被&amp;nbsp;Redis&amp;nbsp;的命令SADD插入到一个名为&amp;nbsp;yiibai 集合。&lt;/p&gt;&lt;h2&gt;Redis有序集合&lt;/h2&gt;&lt;p&gt;Redis的有序集合类似于&amp;nbsp;Redis&amp;nbsp;的集合，但是存储的值在集合中具有唯一性。另外有序集合的每个成员都使用分值（score）的东西，这个分值就是用于将有序集合排序，从分值最小到最大来排序。&lt;/p&gt;&lt;p&gt;在&amp;nbsp;Redis&amp;nbsp;有序集合添加，删除和测试成员的存在的时间复杂度为&amp;nbsp;O（1）（恒定时间，无论集合内包含元素的数量）。列表的最大长度为&amp;nbsp;232&amp;nbsp;- 1&amp;nbsp;个元素（4294967295，每个集合的元素超过四十亿）。&amp;nbsp;&lt;/p&gt;&lt;h2&gt;示例&lt;/h2&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ZADD&amp;nbsp;yiibai&amp;nbsp;1&amp;nbsp;redis\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ZADD&amp;nbsp;yiibai&amp;nbsp;2&amp;nbsp;mongodb\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ZADD&amp;nbsp;yiibai&amp;nbsp;3&amp;nbsp;mysql\n(integer)&amp;nbsp;1\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ZADD&amp;nbsp;yiibai&amp;nbsp;3&amp;nbsp;mysql\n(integer)&amp;nbsp;0\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ZADD&amp;nbsp;yiibai&amp;nbsp;4&amp;nbsp;mysql\n(integer)&amp;nbsp;0\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;ZRANGE&amp;nbsp;yiibai&amp;nbsp;0&amp;nbsp;10&amp;nbsp;WITHSCORES\n\n1)&amp;nbsp;&amp;quot;redis&amp;quot;\n2)&amp;nbsp;&amp;quot;1&amp;quot;\n3)&amp;nbsp;&amp;quot;mongodb&amp;quot;\n4)&amp;nbsp;&amp;quot;2&amp;quot;\n5)&amp;nbsp;&amp;quot;mysql&amp;quot;\n6)&amp;nbsp;&amp;quot;4&amp;quot;&lt;/pre&gt;&lt;p&gt;在上面的例子中的三个值及其分值被&amp;nbsp;ZADD&amp;nbsp;命令插入一个名称为&amp;nbsp;yiibai&amp;nbsp;的&amp;nbsp;redis&amp;nbsp;有序集合中&lt;/p&gt;&lt;h2&gt;Redis HyperLogLog&lt;/h2&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。&lt;/p&gt;&lt;p&gt;在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;下面的例子说明了&amp;nbsp;HyperLogLog&amp;nbsp;Redis&amp;nbsp;的工作原理：&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;PFADD&amp;nbsp;tutorials&amp;nbsp;&amp;quot;redis&amp;quot;\n\n1)&amp;nbsp;(integer)&amp;nbsp;1\n\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;PFADD&amp;nbsp;tutorials&amp;nbsp;&amp;quot;mongodb&amp;quot;\n\n1)&amp;nbsp;(integer)&amp;nbsp;1\n\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;PFADD&amp;nbsp;tutorials&amp;nbsp;&amp;quot;mysql&amp;quot;\n\n1)&amp;nbsp;(integer)&amp;nbsp;1\n\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;PFCOUNT&amp;nbsp;tutorials\n\n(integer)&amp;nbsp;3&lt;/pre&gt;&lt;h2&gt;Redis发布订阅&lt;/h2&gt;&lt;p&gt;Redis订阅和发布实现了通讯系统，发件人（在&amp;nbsp;Redis&amp;nbsp;中的术语称为发布者）发送邮件，而接收器（订户）接收它们。信息传输的链路称为通道。Redis&amp;nbsp;一个客户端可以订阅任意数量的通道。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;以下举例说明发布订阅用户如何工作。在下面的例子给出一个客户端订阅的通道命名&amp;nbsp;redisChat 。&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SUBSCRIBE&amp;nbsp;redisChat\n\nReading&amp;nbsp;messages...&amp;nbsp;(press&amp;nbsp;Ctrl-C&amp;nbsp;to&amp;nbsp;quit)\n1)&amp;nbsp;&amp;quot;subscribe&amp;quot;\n2)&amp;nbsp;&amp;quot;redisChat&amp;quot;\n3)&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p&gt;现在，两个客户端都在同一个通道名：redisChat&amp;nbsp;上发布消息，上述订阅客户端接收消息。&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;PUBLISH&amp;nbsp;redisChat&amp;nbsp;&amp;quot;Redis&amp;nbsp;is&amp;nbsp;a&amp;nbsp;great&amp;nbsp;caching&amp;nbsp;technique&amp;quot;\n\n(integer)&amp;nbsp;1\n\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;PUBLISH&amp;nbsp;redisChat&amp;nbsp;&amp;quot;Learn&amp;nbsp;redis&amp;nbsp;by&amp;nbsp;tutorials&amp;nbsp;point&amp;quot;\n\n(integer)&amp;nbsp;1\n\n\n1)&amp;nbsp;&amp;quot;message&amp;quot;\n2)&amp;nbsp;&amp;quot;redisChat&amp;quot;\n3)&amp;nbsp;&amp;quot;Redis&amp;nbsp;is&amp;nbsp;a&amp;nbsp;great&amp;nbsp;caching&amp;nbsp;technique&amp;quot;\n1)&amp;nbsp;&amp;quot;message&amp;quot;\n2)&amp;nbsp;&amp;quot;redisChat&amp;quot;\n3)&amp;nbsp;&amp;quot;Learn&amp;nbsp;redis&amp;nbsp;by&amp;nbsp;tutorials&amp;nbsp;point&amp;quot;&lt;/pre&gt;&lt;h2&gt;Redis事务&lt;/h2&gt;&lt;p&gt;Redis事务允许一组命令在单一步骤中执行。事务有两个属性，说明如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;在一个事务中的所有命令作为单个独立的操作顺序执行。在Redis事务中的执行过程中而另一客户机发出的请求，这是不可以的；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Redis事务是原子的。原子意味着要么所有的命令都执行，要么都不执行；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;示例&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;事务由指令&amp;nbsp;MULTI&amp;nbsp;发起的，之后传递需要在事务中和整个事务中，最后由&amp;nbsp;EXEC&amp;nbsp;命令执行所有命令的列表。&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;MULTI\nOK\nList&amp;nbsp;of&amp;nbsp;commands&amp;nbsp;here\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;EXEC&lt;/pre&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;下面的例子说明了&amp;nbsp;Redis&amp;nbsp;的事务是如何开始和执行。&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;MULTI\nOK\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;SET&amp;nbsp;tutorial&amp;nbsp;redis\nQUEUED\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;GET&amp;nbsp;tutorial\nQUEUED\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;INCR&amp;nbsp;visitors\nQUEUED\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;EXEC\n\n1)&amp;nbsp;OK\n2)&amp;nbsp;&amp;quot;redis&amp;quot;\n3)&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;h2&gt;Redis脚本&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;脚本是使用Lua解释脚本用来评估（计算）。从&amp;nbsp;Redis&amp;nbsp;2.6.0&amp;nbsp;版本开始内置这个解释器。命令&amp;nbsp;EVAL&amp;nbsp;用于执行&amp;nbsp;脚本命令。&lt;/p&gt;&lt;h2&gt;语法&lt;/h2&gt;&lt;p&gt;EVAL命令的基本语法如下：&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;EVAL&amp;nbsp;script&amp;nbsp;numkeys&amp;nbsp;key&amp;nbsp;[key&amp;nbsp;...]&amp;nbsp;arg&amp;nbsp;[arg&amp;nbsp;...]&lt;/pre&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;下面的例子说明了&amp;nbsp;Redis&amp;nbsp;脚本是如何工作的：&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;EVAL&amp;nbsp;&amp;quot;return&amp;nbsp;{KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&amp;quot;&amp;nbsp;2&amp;nbsp;key1&amp;nbsp;key2&amp;nbsp;first&amp;nbsp;second\n\n1)&amp;nbsp;&amp;quot;key1&amp;quot;\n2)&amp;nbsp;&amp;quot;key2&amp;quot;\n3)&amp;nbsp;&amp;quot;first&amp;quot;\n4)&amp;nbsp;&amp;quot;second&amp;quot;&lt;/pre&gt;&lt;h2&gt;Redis连接&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;的连接命令基本上都用于管理&amp;nbsp;Redis服务器与客户端连接。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;下面的例子说明了一个客户端在Redis服务器上，如何检查服务器是否正在运行并验证自己。&lt;/p&gt;&lt;pre&gt;redis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;AUTH&amp;nbsp;&amp;quot;password&amp;quot;\nOK\nredis&amp;nbsp;127.0.0.1:6379&amp;gt;&amp;nbsp;PING\nPONG&lt;/pre&gt;&lt;h2&gt;Redis备份&lt;/h2&gt;&lt;p&gt;Redis的SAVE命令用于创建当前&amp;nbsp;Redis&amp;nbsp;数据库的备份。&lt;/p&gt;&lt;h2&gt;语法&lt;/h2&gt;&lt;p&gt;Redis 的 SAVE 命令的基本语法如下所示：&lt;/p&gt;&lt;pre&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;SAVE&lt;/pre&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;以下示例显示了如何在Redis的当前数据库中创建备份。&lt;/p&gt;&lt;pre&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;SAVE\n\nOK&lt;/pre&gt;&lt;p&gt;在执行此命令之后，将在&amp;nbsp;redis&amp;nbsp;目录中创建一个&amp;nbsp;dump.rdb&amp;nbsp;文件。&lt;/p&gt;&lt;h2&gt;&lt;p&gt;恢复&amp;nbsp;Redis&amp;nbsp;数据&lt;/p&gt;&lt;/h2&gt;&lt;p&gt;要恢复&amp;nbsp;redis&amp;nbsp;数据只需要要将&amp;nbsp;Redis&amp;nbsp;的备份文件（dump.rdb）放到&amp;nbsp;Redis&amp;nbsp;的目录中，并启动服务器。要了解知道&amp;nbsp;Redis&amp;nbsp;目录在什么位置，可使用&amp;nbsp;CONFIG&amp;nbsp;命令，如下所示：&lt;/p&gt;&lt;pre&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;CONFIG&amp;nbsp;get&amp;nbsp;dir\n\n1)&amp;nbsp;&amp;quot;dir&amp;quot;\n2)&amp;nbsp;&amp;quot;/user/yiibai/redis-2.8.13/src&amp;quot;&lt;/pre&gt;&lt;p&gt;在上面的命令命令输出为&amp;nbsp;/user/yiibai/redis-2.8.13/src&amp;nbsp;就是使用的&amp;nbsp;Redis&amp;nbsp;目录，也就是&amp;nbsp;Redis&amp;nbsp;的服务器安装的目录。&lt;/p&gt;&lt;h2&gt;Bgsave&lt;/h2&gt;&lt;p&gt;创建&amp;nbsp;Redis&amp;nbsp;的备份也可以使用备用命令&amp;nbsp;BGSAVE&amp;nbsp;。此命令将启动备份过程，并在后台运行此。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;pre&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;BGSAVE\n\nBackground&amp;nbsp;saving&amp;nbsp;started&lt;/pre&gt;&lt;h2&gt;Redis安全&lt;/h2&gt;&lt;p&gt;Redis&amp;nbsp;数据库可以配置安全保护的，所以任何客户端在连接执行命令时需要进行身份验证。为了确保&amp;nbsp;Redis&amp;nbsp;的安全，需要在配置文件设置密码。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;下面给出的例子显示的步骤是用来确保&amp;nbsp;Redis&amp;nbsp;实例的安全。&lt;/p&gt;&lt;pre&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;CONFIG&amp;nbsp;get&amp;nbsp;requirepass\n1)&amp;nbsp;&amp;quot;requirepass&amp;quot;\n2)&amp;nbsp;&amp;quot;&amp;quot;&lt;/pre&gt;&lt;p&gt;默认情况下此属性是空的，这意味着此实例没有设置密码。可以通过执行以下命令来修改设置此属性&lt;/p&gt;&lt;pre&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;CONFIG&amp;nbsp;set&amp;nbsp;requirepass&amp;nbsp;&amp;quot;yiibaipass&amp;quot;\nOK\n127.0.0.1:6379&amp;gt;&amp;nbsp;CONFIG&amp;nbsp;get&amp;nbsp;requirepass\n1)&amp;nbsp;&amp;quot;requirepass&amp;quot;\n2)&amp;nbsp;&amp;quot;yiibaipass&amp;quot;&lt;/pre&gt;&lt;p&gt;如果客户端运行命令无需验证设置密码，那么（错误）NOAUTH&amp;nbsp;需要验证。错误将返回。因此，客户端需要使用&amp;nbsp;AUTH&amp;nbsp;命令来验证自己的身份信息。&lt;/p&gt;&lt;h3&gt;语法&lt;/h3&gt;&lt;p&gt;AUTH命令的基本语法如下所示：&lt;/p&gt;&lt;pre&gt;127.0.0.1:6379&amp;gt;&amp;nbsp;AUTH&amp;nbsp;password&lt;/pre&gt;&lt;h2&gt;Redis性能测试&lt;/h2&gt;&lt;p&gt;Redis的基准性能测试是通过同时运行&amp;nbsp;N&amp;nbsp;个命令以检查&amp;nbsp;Redis&amp;nbsp;性能的工具。&lt;/p&gt;&lt;h2&gt;语法&lt;/h2&gt;&lt;p&gt;Redis的基准测试的基本语法如下所示：&lt;/p&gt;&lt;pre&gt;redis-benchmark&amp;nbsp;[option]&amp;nbsp;[option&amp;nbsp;value]&lt;/pre&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;下面给出的示例是通过调用&amp;nbsp;100000&amp;nbsp;个（次）命令来检查&amp;nbsp;Redis。&lt;/p&gt;&lt;pre&gt;redis-benchmark&amp;nbsp;-n&amp;nbsp;100000\n\nPING_INLINE:&amp;nbsp;141043.72&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nPING_BULK:&amp;nbsp;142857.14&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nSET:&amp;nbsp;141442.72&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nGET:&amp;nbsp;145348.83&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nINCR:&amp;nbsp;137362.64&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nLPUSH:&amp;nbsp;145348.83&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nLPOP:&amp;nbsp;146198.83&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nSADD:&amp;nbsp;146198.83&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nSPOP:&amp;nbsp;149253.73&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nLPUSH&amp;nbsp;(needed&amp;nbsp;to&amp;nbsp;benchmark&amp;nbsp;LRANGE):&amp;nbsp;148588.42&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nLRANGE_100&amp;nbsp;(first&amp;nbsp;100&amp;nbsp;elements):&amp;nbsp;58411.21&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nLRANGE_300&amp;nbsp;(first&amp;nbsp;300&amp;nbsp;elements):&amp;nbsp;21195.42&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nLRANGE_500&amp;nbsp;(first&amp;nbsp;450&amp;nbsp;elements):&amp;nbsp;14539.11&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nLRANGE_600&amp;nbsp;(first&amp;nbsp;600&amp;nbsp;elements):&amp;nbsp;10504.20&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second\nMSET&amp;nbsp;(10&amp;nbsp;keys):&amp;nbsp;93283.58&amp;nbsp;requests&amp;nbsp;per&amp;nbsp;second&lt;/pre&gt;&lt;h2&gt;Redis客户端连接&lt;/h2&gt;&lt;p&gt;如果启用了Redis&amp;nbsp;的接受配置监听，客户端可在TCP端口上与Unix套接字连接。以下操作执行后新的客户端连接被服务器接受：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;客户端套接字在非阻塞状态，因为&amp;nbsp;Redis&amp;nbsp;使用复用和非阻塞I/O；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TCP_NODELAY选项设定以确保不会在连接时延迟；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;创建一个可读的文件事件，以便&amp;nbsp;Redis&amp;nbsp;能够尽快收集客户端查询作为新的数据可被套接字读取；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;p&gt;客户端最大连接数量&lt;/p&gt;&lt;/h3&gt;&lt;p&gt;在Redis的配置文件（redis.conf）有一个属性&amp;nbsp;maxclients&amp;nbsp;，它描述了可以连接到&amp;nbsp;Redis&amp;nbsp;的客户的最大数量。命令的基本语法是：&lt;/p&gt;&lt;pre&gt;config&amp;nbsp;get&amp;nbsp;maxclients\n\n1)&amp;nbsp;&amp;quot;maxclients&amp;quot;\n2)&amp;nbsp;&amp;quot;10000&amp;quot;&lt;/pre&gt;&lt;p&gt;默认情况下此属性设置为&amp;nbsp;10000（取决于OS的文件标识符限制最大数量），但可以修改这个属性。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;在下面给出的例子我们已经设置客户端最大连接数量为&amp;nbsp;100000，在之后启动服务器：&lt;/p&gt;&lt;pre&gt;redis-server&amp;nbsp;--maxclients&amp;nbsp;100000&lt;/pre&gt;&lt;h2&gt;Redis管道&lt;/h2&gt;&lt;p&gt;Redis是一个TCP服务器，支持请求/响应协议。在&amp;nbsp;redis&amp;nbsp;中一个请求完成以下步骤：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;客户端发送一个查询给服务器，并从套接字中读取，通常服务器的响应是在一个封闭的方式；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;服务器处理命令并将响应返回给客户端；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;p&gt;管道的含义&lt;/p&gt;&lt;/h3&gt;&lt;p&gt;管道的基本含义是：客户端可以发送多个请求给服务器，而不等待全部响应，最后在单个步骤中读取所有响应。&lt;/p&gt;&lt;h3&gt;示例&lt;/h3&gt;&lt;p&gt;要检查&amp;nbsp;Redis&amp;nbsp;管道只需要启动&amp;nbsp;Redis&amp;nbsp;实例，并在终端输入以下命令。&lt;/p&gt;&lt;pre&gt;$(echo&amp;nbsp;-en&amp;nbsp;&amp;quot;PING\\r\\n&amp;nbsp;SET&amp;nbsp;tutorial&amp;nbsp;redis\\r\\nGET&amp;nbsp;tutorial\\r\\nINCR&amp;nbsp;visitor\\r\\nINCR&amp;nbsp;visitor\\r\\nINCR&amp;nbsp;visitor\\r\\n&amp;quot;;&amp;nbsp;sleep&amp;nbsp;10)&amp;nbsp;|&amp;nbsp;nc&amp;nbsp;localhost&amp;nbsp;6379\n\n+PONG\n+OK\nredis\n:1\n:2\n:3&lt;/pre&gt;&lt;p&gt;在上面的例子所示，了解使用&amp;nbsp;PING&amp;nbsp;命令连接&amp;nbsp;Redis，之后我们在&amp;nbsp;Redis&amp;nbsp;设定一个名为&amp;nbsp;tutorial&amp;nbsp;字符串值，之后拿到这个键对应的值并增加访问人数的三倍。在结果中，我们可以看到所有的命令都提交给&amp;nbsp;Redis&amp;nbsp;一次，Redis是给单步输出所有命令。&lt;/p&gt;&lt;h3&gt;&lt;p&gt;通道的好处&lt;/p&gt;&lt;/h3&gt;&lt;p&gt;这种技术的好处是显着提高协议的性能。管道localhost&amp;nbsp;获得至少达到百倍的网络连接速度。&lt;/p&gt;&lt;h2&gt;Redis分区&lt;/h2&gt;&lt;p&gt;分区是将数据分割成多个&amp;nbsp;Redis&amp;nbsp;实例，使每个实例将只包含键子集的过程。&lt;/p&gt;&lt;h3&gt;分区的好处&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;它允许更大的数据库，使用多台计算机的内存总和。如果不分区，只是一台计算机有限的内存可以支持的数据存储；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;它允许按比例在多内核和多个计算机计算，以及网络带宽向多台计算机和网络适配器；&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;p&gt;分区的劣势&lt;/p&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;涉及多个键的操作通常不支持。例如，如果它们被存储在被映射到不同的&amp;nbsp;Redis&amp;nbsp;实例键，则不能在两个集合之间执行交集；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;涉及多个键时，Redis事务无法使用；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分区粒度是一个键，所以它不可能使用一个键和一个非常大的有序集合分享一个数据集；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;当使用分区，数据处理比较复杂，比如要处理多个RDB/AOF文件，使数据备份需要从多个实例和主机聚集持久性文件；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加和删除的容量可能会很复杂。例如：Redis的Cluster支持数据在运行时添加和删除节点是透明平衡的，但其他系统，如客户端的分区和代理服务器不支持此功能&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;分区类型&lt;/h3&gt;&lt;p&gt;Redis&amp;nbsp;提供有两种类型的分区。假设我们有四个&amp;nbsp;redis&amp;nbsp;实例：R0，R1，R2，R3，分别表示用户用户如：user:1,&amp;nbsp;user:2,&amp;nbsp;...等等&lt;/p&gt;&lt;h3&gt;&lt;p&gt;范围分区&lt;/p&gt;&lt;/h3&gt;&lt;p&gt;范围分区被映射对象指定&amp;nbsp;Redis&amp;nbsp;实例在一个范围内完成。&lt;/p&gt;&lt;p&gt;在我们的例子中，用户从ID为&amp;nbsp;0&amp;nbsp;至&amp;nbsp;ID10000&amp;nbsp;将进入实例&amp;nbsp;R0，而用户&amp;nbsp;ID&amp;nbsp;10001到ID&amp;nbsp;20000&amp;nbsp;将进入实例&amp;nbsp;R1&amp;nbsp;等等。&lt;/p&gt;&lt;h3&gt;&lt;p&gt;散列分区&lt;/p&gt;&lt;/h3&gt;&lt;p&gt;在这种类型的分区是一个散列函数（例如，模数函数）用于将键转换为数字数据，然后存储在不同的&amp;nbsp;redis&amp;nbsp;实例。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '41', '小静龙', '1470923062', './Uploads/article/20160811/57ac80d7e8e60.jpeg', '1', '0', '7', '0');
INSERT INTO `xjl_article` VALUES ('49', 'Nginx 日志格式简介分析', '&lt;p&gt;&lt;strong&gt;一、nginx日志分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;先看一段nginx日志&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;101.226.125.115 - - [12/Aug/2016:09:41:48 +0800] &amp;quot;GET /Home/Article/detail/aid/44 HTTP/1.1&amp;quot; 200 1950 &amp;quot;http://www.doadc.com/Home/Index/index.jsp&amp;quot; &amp;quot;Mozilla/5.0 (Linux; Android 6.0; FRD-AL00 Build/HUAWEIFRD-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile MQQBrowser/6.2 TBS/036555 Safari/537.36 MicroMessenger/6.3.23.840 NetType/WIFI Language/zh_CN&amp;quot; 59.63.170.241&lt;/p&gt;&lt;p&gt;101.226.125.115 - - [12/Aug/2016:09:41:48 +0800] &amp;quot;GET /Home/Index/getNewArticle.jsp HTTP/1.1&amp;quot; 200 73535 &amp;quot;http://www.doadc.com/Home/Article/detail/aid/44&amp;quot; &amp;quot;Mozilla/5.0 (Linux; Android 6.0; FRD-AL00 Build/HUAWEIFRD-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile MQQBrowser/6.2 TBS/036555 Safari/537.36 MicroMessenger/6.3.23.840 NetType/WIFI Language/zh_CN&amp;quot; 59.63.170.241&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;101.226.125.115 - - [12/Aug/2016:09:41:48 +0800] &amp;quot;GET /Home/Index/getClickArticle.jsp HTTP/1.1&amp;quot; 200 51675 &amp;quot;http://www.doadc.com/Home/Article/detail/aid/44&amp;quot; &amp;quot;Mozilla/5.0 (Linux; Android 6.0; FRD-AL00 Build/HUAWEIFRD-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile MQQBrowser/6.2 TBS/036555 Safari/537.36 MicroMessenger/6.3.23.840 NetType/WIFI Language/zh_CN&amp;quot; 59.63.170.241&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;Nginx中日志文件的格式在nginx.conf中定义，其默认格式如下:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;#cat&amp;nbsp;/usr/local/nginx/conf/nginx.conf&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; log_format access ‘$remote_addr – $remote_user [$time_local] “$request” ‘‘$status $body_bytes_sent “$http_referer” ‘‘”$http_user_agent” $http_x_forwarded_for’;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;其中，各个字段的含义如下：&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；&lt;br/&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;2.$remote_user ：用来记录客户端用户名称；&lt;br/&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;3.$time_local ： 用来记录访问时间与时区；&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;4.$request ： 用来记录请求的url与http协议；&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;5.$status ： 用来记录请求状态；成功是200，&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;7.$http_referer ：用来记录从那个页面链接访问过来的；&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;8.$http_user_agent ：记录客户端浏览器的相关信息；&lt;/p&gt;&lt;p&gt;所以以上日志可以理解为：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;“客户端的ip地址”--访问日期 &amp;nbsp;‘GET方式 &amp;nbsp;访问路径’ &amp;nbsp;用来记录请求状态；成功是200， 记录发送给客户端文件主体内容大小； 用来记录从那个页面链接访问过来的； &amp;nbsp;访问工具版本号等等 &amp;nbsp; 记录客户端浏览器的相关信息；&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '41', '小静龙', '1470969484', './Uploads/article/20160812/57ad36889b0f4.jpeg', '1', '0', '5', '2');
INSERT INTO `xjl_article` VALUES ('50', 'CenterOS 安装 svn', '&lt;p&gt;1、安装svn使用域名方式安装时候最简单的&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;使用命令：yum -y install svn &amp;nbsp; 即可&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2、测试svn是否安装成功&lt;/p&gt;&lt;p&gt;&amp;nbsp;使用命令：svnserve&amp;nbsp;--version&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;3、创建svn版本库&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;1）、创建版本库文件夹&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;使用命令:&amp;nbsp;sudo&amp;nbsp;mkdir&amp;nbsp;-p&amp;nbsp;/home/svndata &amp;nbsp;(具体路径根据自己需求来定,我是以自己路径为例)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;2）、创建版本库&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 使用命令:sudo&amp;nbsp;svnadmin&amp;nbsp;create&amp;nbsp;/home/svndata/newProject&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 创建成功之后目录下文件结构是：&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&quot;http://www.doadc.com/Uploads/article/20160831/1472636396752174.png&quot; title=&quot;1472636396752174.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;3) &amp;nbsp;编辑修改svnserve.conf&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;使用命令:vim&amp;nbsp;/home/svndata/newProject/conf/svnserve.conf&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;anon-access&amp;nbsp;=&amp;nbsp;none &amp;nbsp; &amp;nbsp;#控制非鉴权用户访问版本库的权限&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;auth-access&amp;nbsp;=&amp;nbsp;write &amp;nbsp; #控制鉴权用户访问版本库的权限&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;password-db&amp;nbsp;=&amp;nbsp;passwd &amp;nbsp;#指定用户名口令文件名&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;authz-db&amp;nbsp;=&amp;nbsp;authz &amp;nbsp; &amp;nbsp; #指定权限配置文件名 &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;realm&amp;nbsp;=&amp;nbsp;wangwa &amp;nbsp; &amp;nbsp; &amp;nbsp;#指定版本库的认证域，即在登录时提示的认证域名称&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;使用命令:vim&amp;nbsp;/home/svndata/newProject/conf/passwd&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;[users]&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;test&amp;nbsp;=&amp;nbsp;test &amp;nbsp; &amp;nbsp;#用户，密码&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;使用命令:vim&amp;nbsp;/home/svndata/newProject/conf/authz&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;test=rw &amp;nbsp;为用户设置权限&lt;/p&gt;&lt;p&gt;4、启动svn&lt;/p&gt;&lt;p&gt;&amp;nbsp; 使用命令：sudo&amp;nbsp;svnserve&amp;nbsp;-d /home/svndata&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;5、使用svn客户端连接&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '41', '小静龙', '1472637338', './Uploads/article/20160831/57c6a995c7d82.jpeg', '1', '0', '12', '1');
INSERT INTO `xjl_article` VALUES ('51', 'TIOBE 2016年10月编程语言排行榜：Go语言将问鼎2016年度编程语言宝座？ ...', '&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;span&gt;&lt;strong&gt;距2016年度编程语言的宣布仅剩三个月了，这次宝座将会花落谁家呢？与去年同期相比，2016年仅有两种语言的增长率超过了1%，分别是Go语言和Groovy语言。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;不过要注意的是：Groovy在2015年底出现了爆炸性的增长，因此在2017年1月左右的增长速度可能就不会太快了。因此，谷歌的Go语言似乎就是那个唯一了，这其中Docker这个以Go语言写就的容器应用普及开来很可能在其中助了一把力。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20161010/1476070059203502.jpg&quot; title=&quot;1476070059203502.jpg&quot; alt=&quot;2016100811393528.jpg&quot; width=&quot;612&quot; height=&quot;525&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20161010/1476070093698631.jpg&quot; title=&quot;1476070093698631.jpg&quot; alt=&quot;1476070093698631.jpg&quot; width=&quot;625&quot; height=&quot;489&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;/Uploads/article/20161010/1476070122761690.jpg&quot; title=&quot;1476070122761690.jpg&quot; alt=&quot;20161008114128256.jpg&quot; width=&quot;606&quot; height=&quot;367&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp; &amp;nbsp;其他类似Objective-C、Swift以及R语言等编程语言的年度增长率虽接近1%，但应当还达不到年度编程语言的标准。特别是再次挤入候选名单的Objective-C，从2014年4月的12.875%下跌到2016年1月的1.074%，不过目前又在回升了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;必须声明这个榜单本身采集的是英文世界的数据，虽然在反映趋势上有一些参考意义，但与中国的实际情况不完全符合，而且，这张采样本身也有相当大的局限性。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '39', '头条', '1476070237', './Uploads/article/20161010/57fb0b592a313.jpeg', '1', '0', '4', '1');
INSERT INTO `xjl_article` VALUES ('52', 'PHP的unset究竟会不会释放内存?', '&lt;h1&gt;PHP的unset究竟会不会释放内存?&lt;/h1&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;首先让我们看一个例子&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $a = &amp;quot;laruence&amp;quot;;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; unset($a);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&lt;br/&gt;输出(在我的个人电脑上, 可能会因为系统,PHP版本,载入的扩展不同而不同):&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(90440)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(90640)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(90472&lt;br/&gt;&lt;br/&gt;注意到 90472-90440=32, 于是就有了各种的结论, 有的人说PHP的unset并不真正释放内存, 有的说, PHP的unset只是在释放大变量(大量字符串, 大数组)的时候才会真正free内存, 更有人说, 在PHP层面讨论内存是没有意义的.&lt;br/&gt;&lt;br/&gt;那么, 到底unset会不会释放内存? 这32个字节跑哪里去了?&lt;br/&gt;&lt;br/&gt;要回答这个问题, 我将从俩个方面入手:&lt;br/&gt;这32个字节去哪里了&lt;br/&gt;&lt;br/&gt;首先我们要打破一个思维: PHP不像C语言那样, 只有你显示的调用内存分配相关API才会有内存的分配.&lt;br/&gt;也就是说, 在PHP中, 有很多我们看不到的内存分配过程.&lt;br/&gt;比如对于:&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $a = &amp;quot;laruence&amp;quot;;&lt;br/&gt;&lt;br/&gt;隐式的内存分配点就有:&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. 为变量名分配内存, 存入符号表&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. 为变量值分配内&lt;br/&gt;&lt;br/&gt;所以, 不能只看表象.&lt;br/&gt;第二, 别怀疑,PHP的unset确实会释放内存(当然, 还要结合引用和计数, 这部分的内容请参看我之前的文章深入理解PHP原理之变量分离/引用), 但这个释放不是C编程意义上的释放, 不是交回给OS.&lt;br/&gt;对于PHP来说, 它自身提供了一套和C语言对内存分配相似的内存管理API,这些API和C的API意义对应, 在PHP内部都是通过这些API来管理内存的.&lt;br/&gt;&lt;br/&gt;当我们调用emalloc申请内存的时候, PHP并不是简单的向OS要内存, 而是会像OS要一个大块的内存, 然后把其中的一块分配给申请者, 这样当再有逻辑来申请内存的时候, 就不再需要向OS申请内存了, 避免了频繁的系统调用.&lt;br/&gt;&lt;br/&gt;比如如下的例子:&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;?php&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage(TRUE)); //注意获取的是real_size&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $a = &amp;quot;laruence&amp;quot;;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage(TRUE));&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; unset($a);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage(TRUE));&lt;br/&gt;&lt;br/&gt;输出:&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(262144)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(262144)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(262144&lt;br/&gt;&lt;br/&gt;也就是我们在定义变量$a的时候, PHP并没有向系统申请新内存.&lt;br/&gt;&lt;br/&gt;同 样的, 在我们调用efree释放内存的时候, PHP也不会把内存还给OS, 而会把这块内存, 归入自己维护的空闲内存列表. 而对于小块内存来说, 更可能的是, 把它放到内存缓存列表中去(后记, 某些版本的PHP, 比如我验证过的PHP5.2.4, 5.2.6, 5.2.8, 在调用get_memory_usage()的时候, 不会减去内存缓存列表中的可用内存块大小, 导致看起来, unset以后内存不变).&lt;br/&gt;&lt;br/&gt;现在让我来回答这32个字节跑哪里去了, 就向我刚才说的, 很多内存分配的过程不是显式的, 看了下面的代码你就明白了:&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;?php&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(&amp;quot;I am www.7di.net&amp;quot;);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $a = &amp;quot;laruence&amp;quot;;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; unset($a);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&lt;br/&gt;输出:&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; string(43) &amp;quot;I am www.7di.net&amp;quot;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(90808) //赋值前&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(90976)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(90808) //是的, 内存正常释放&lt;br/&gt;&lt;br/&gt;90808-90808 = 0, 正常了, 也就是说这32个字节是被输出函数给占用了(严格来说, 是被输出的Header占用了)&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&lt;br/&gt;只增不减的数组&lt;br/&gt;&lt;br/&gt;Hashtable是PHP的核心结构(了解Hashtable, 可以参看我之前的文章深入理解PHP之数组(遍历顺序)), 数组也是用她来表示的, 而符号表也是一种关联数组, 对于如下代码:&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(&amp;quot;I am www.7di.net&amp;quot;);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; $array = array_fill(1, 100, &amp;quot;laruence&amp;quot;);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; foreach ($array as $key =&amp;gt; $value) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ${$value . $key} = NULL;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; foreach ($array as $key=&amp;gt; $value) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; unset(${$value . $key});&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump(memory_get_usage());&lt;br/&gt;&lt;br/&gt;我们定义了100个变量, 然后又按个Unset了他们, 来看看输出:&lt;br/&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; string(43) &amp;quot;I am www.7di.net&amp;quot;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(93560)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(118848)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int(104448&lt;br/&gt;&lt;br/&gt;Wow, 怎么少了这么多内存?&lt;br/&gt;这是因为对于Hashtable来说, 定义它的时候, 不可能一次性分配足够多的内存块, 来保存未知个数的元素, 所以PHP会在初始化的时候, 只是分配一小部分内存块给HashTable, 当不够用的时候再RESIZE扩容,&lt;br/&gt;&lt;br/&gt;而Hashtable, 只能扩容, 不会减少, 对于上面的例子, 当我们存入100个变量的时候, 符号表不够用了, 做了一次扩容, 而当我们依次unset掉这100个变量以后, 变量占用的内存是释放了(118848 – 104448), 但是符号表并没有缩小, 所以这些少的内存是被符号表本身占去了…&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '39', '小静龙', '1489629746', './Uploads/article/20170316/58c9f22f857cf.jpeg', '1', '0', '3', '1');
INSERT INTO `xjl_article` VALUES ('53', '第一次用laravel', '&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;quot;Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。它可以让你从面条一样杂乱的代码中解脱出来；它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力。......&amp;quot;,这是一段百度上对laravel的介绍。&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img src=&quot;https://www.doadc.com/Uploads/article/20170312/1489285099265224.jpg&quot; title=&quot;1489285099265224.jpg&quot; alt=&quot;11130f096dbec743756b69cbb22f9.jpg&quot; width=&quot;449&quot; height=&quot;294&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;去年年底公司决定要开发一个电商saas平台，本人作为主力开发承担了所有后台开发任务。刚开始要选择开发框架，由于以前对国内最火的PHP框架think PHP的长期用，我觉得用think PHP应该能很快的完成开发任务，但是，用老版本的think PHP我有点不太愿意，因为thinkphp5.0已经出来了，没错，程序员就是一个喜欢追求新技术的人种，最后就决定用最新的think PHP框架开发，但是开发过程中发现think PHP5刚发布那些天总有各种bug，官网上每天都有人提出新的bug，这让我有点受不了。最后不得不选择新的开发框架，想了好久我突然想到了被好多人推崇的laravel ,这个号称PHP界最优秀的开发框架。我想了想这是一个很好的机会去试试，因为之前我并没有这样的机会去独立选择并开发企业项目。就这样我开始了laravel开发之路。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;开发任务稳步进行，但是问题也渐渐暴露出来，记得知乎上有好多人说laravel是学之者生，用之者死的一个框架。“学之者生”是因为它是PHP界最火的框架，学会了它那么你就有可能走向最火的PHP开发，“用之者死”是因为你要想短期内把它用透那并不是一件容易的事，因为它的文档资料太少了&lt;img src=&quot;http://img.baidu.com/hi/jx2/j_0016.gif&quot;/&gt;，有时候遇到一个问题，我发现很难找到准确的解决方法。不过还好，楼主总能变着法的去解决开发中的任何问题。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;两个月时间过去了开发任务逐渐结束，等到测试的时候我才发现程序并没有多少问题，问题在于“好慢”，用过laravel的人都知道性能一只是Laravel 框架为人诟病的一个点。用thinkphp 一下子就能出来的页面在laravel上总需要考虑一下才能显示出页面&lt;img src=&quot;http://img.baidu.com/hi/jx2/j_0009.gif&quot;/&gt;。问题出现了就得解决，我开始了疯狂的找资料，只为让我开发的网站能快速响应。通过查找我找到了以下给laravel提速的办法：&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;配置信息缓存php &amp;nbsp;&lt;code&gt;artisan config:cache&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;路由缓存 php&amp;nbsp;&lt;code&gt;artisan route:cache&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类映射加载优化 php&amp;nbsp;&lt;code&gt;artisan optimize&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;自动加载优化&amp;nbsp;&lt;code&gt;composer dumpautoload&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用 Memcached 来存储会话&amp;nbsp;&lt;code&gt;config/session.php&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据库请求优化&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;对照这些优化方法我一一完成了网站优化，速度真的有了提升。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;但是，在不断的增加新功能过程中我发现了对配置信息、路由的缓存要做即时的清理重新缓存工作，因为你做了一次缓存之后那么框架就会读取你缓存的路由、缓存的配置信息。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;laravel的坑很深，这需要一点一滴的去摸索。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '39', '小静龙', '1489288479', './Uploads/article/20170312/58c4bd0aa3b6b.jpeg', '1', '0', '3', '1');
INSERT INTO `xjl_article` VALUES ('54', 'curl   post多维数组问题', '&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在PHP开发中我们可能会遇到使用curl post多维数组的需求。但是如果我们直接将多维数组传递过去那么curl又不支持会报错，那么我们怎么来解决这个问题呢？&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;function&amp;nbsp;curlPost($url,$data,$method){\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$ch&amp;nbsp;=&amp;nbsp;curl_init();&amp;nbsp;&amp;nbsp;&amp;nbsp;//1.初始化\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_URL,&amp;nbsp;$url);&amp;nbsp;//2.请求地址\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_CUSTOMREQUEST,&amp;nbsp;$method);//3.请求方式\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//4.参数如下\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_SSL_VERIFYPEER,&amp;nbsp;FALSE);//https\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_SSL_VERIFYHOST,&amp;nbsp;FALSE);\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_USERAGENT,&amp;nbsp;&amp;#39;Mozilla/5.0&amp;nbsp;(compatible;&amp;nbsp;MSIE&amp;nbsp;5.01;&amp;nbsp;Windows&amp;nbsp;NT&amp;nbsp;5.0)&amp;#39;);//模拟浏览器\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_FOLLOWLOCATION,&amp;nbsp;1);\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_AUTOREFERER,&amp;nbsp;1);\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_HTTPHEADER,array(&amp;#39;Accept-Encoding:&amp;nbsp;gzip,&amp;nbsp;deflate&amp;#39;));//gzip解压内容\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_ENCODING,&amp;nbsp;&amp;#39;gzip,deflate&amp;#39;);\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if($method==&amp;quot;POST&amp;quot;){//5.post方式的时候添加数据\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_POSTFIELDS,&amp;nbsp;$data);\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_RETURNTRANSFER,&amp;nbsp;true);\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$tmpInfo&amp;nbsp;=&amp;nbsp;curl_exec($ch);//6.执行\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(curl_errno($ch))&amp;nbsp;{//7.如果出错\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;curl_error($ch);\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;curl_close($ch);//8.关闭\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;$tmpInfo;\n}&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;以上程序中如果$data&amp;nbsp;=&amp;nbsp;array(&amp;#39;foo&amp;#39;=&amp;gt;&amp;#39;bar&amp;#39;,&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;baz&amp;#39;=&amp;gt;&amp;#39;boom&amp;#39;,&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;cow&amp;#39;=&amp;gt;&amp;#39;milk&amp;#39;,&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;php&amp;#39;=&amp;gt;&amp;#39;hypertext&amp;nbsp;processor&amp;#39;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;/p&gt;&lt;p&gt;这样是不会有问题的，&lt;img src=&quot;http://img.baidu.com/hi/jx2/j_0009.gif&quot;/&gt;但是$data&amp;nbsp;=&amp;nbsp;array(&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;user&amp;#39;=&amp;gt;array(&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;name&amp;#39;=&amp;gt;&amp;#39;Bob&amp;nbsp;Smith&amp;#39;,&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;age&amp;#39;=&amp;gt;47,&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;sex&amp;#39;=&amp;gt;&amp;#39;M&amp;#39;,&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;dob&amp;#39;=&amp;gt;&amp;#39;5/12/1956&amp;#39;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ),&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;#39;pastimes&amp;#39;=&amp;gt;array(&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;#39;golf&amp;#39;,&amp;nbsp;&amp;#39;opera&amp;#39;,&amp;nbsp;&amp;#39;poker&amp;#39;,&amp;nbsp;&amp;#39;rap&amp;#39;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;),&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;children&amp;#39;=&amp;gt;array(&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;#39;bobby&amp;#39;=&amp;gt;array(&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;#39;age&amp;#39;=&amp;gt;12,&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ex&amp;#39;=&amp;gt;&amp;#39;M&amp;#39;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ),&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#39;sally&amp;#39;=&amp;gt;array(&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;#39;age&amp;#39;=&amp;gt;8,&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ex&amp;#39;=&amp;gt;&amp;#39;F&amp;#39;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;),&lt;br/&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;#39;CEO&amp;#39;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);那么curl就会报错，&lt;img src=&quot;http://img.baidu.com/hi/jx2/j_0064.gif&quot;/&gt;通过查看文档知道&amp;nbsp;&lt;/p&gt;&lt;pre&gt;curl_setopt($ch,&amp;nbsp;CURLOPT_POSTFIELDS,&amp;nbsp;$data);&lt;/pre&gt;&lt;p&gt;全部数据使用HTTP协议中的 &amp;quot;POST&amp;quot; 操作来发送。 要发送文件，在文件名前面加上&lt;em&gt;@&lt;/em&gt;前缀并使用完整路径。 文件类型可在文件名后以 &amp;#39;&lt;em&gt;;type=mimetype&lt;/em&gt;&amp;#39; 的格式指定。 这个参数可以是 urlencoded 后的字符串，类似&amp;#39;&lt;em&gt;para1=val1&amp;amp;para2=val2&amp;amp;...&lt;/em&gt;&amp;#39;，也可以使用一个以字段名为键值，字段数据为值的数组。 如果&lt;code&gt;value&lt;/code&gt;是一个数组，&lt;em&gt;Content-Type&lt;/em&gt;头将会被设置成&lt;em&gt;multipart/form-data&lt;/em&gt;。&amp;nbsp;从 PHP 5.2.0 开始，使用&amp;nbsp;&lt;em&gt;@&lt;/em&gt;&amp;nbsp;前缀传递文件时，&lt;code&gt;value&lt;/code&gt;必须是个数组。&amp;nbsp;从 PHP 5.5.0 开始,&amp;nbsp;&lt;em&gt;@&lt;/em&gt;&amp;nbsp;前缀已被废弃，文件可通过&amp;nbsp;&lt;a href=&quot;http://php.net/manual/zh/class.curlfile.php&quot;&gt;CURLFile&lt;/a&gt;&amp;nbsp;发送。 设置&lt;code&gt;CURLOPT_SAFE_UPLOAD&lt;/code&gt;&amp;nbsp;为&amp;nbsp;&lt;code&gt;TRUE&lt;/code&gt;&amp;nbsp;可禁用&amp;nbsp;&lt;em&gt;@&lt;/em&gt;&amp;nbsp;前缀发送文件，以增加安全性。很显然多维数组不符合要求的两种类型，所以要对到位数组做处理。这里使用到了&lt;/p&gt;&lt;pre&gt;http_build_query（）生成&amp;nbsp;URL-encode&amp;nbsp;之后的请求字符串&lt;/pre&gt;&lt;p&gt;以上多维数组处理之后结果&lt;/p&gt;&lt;pre&gt;user%5Bname%5D=Bob+Smith&amp;amp;user%5Bage%5D=47&amp;amp;user%5Bsex%5D=M&amp;amp;\nuser%5Bdob%5D=5%2F12%2F1956&amp;amp;pastimes%5B0%5D=golf&amp;amp;pastimes%5B1%5D=opera&amp;amp;\npastimes%5B2%5D=poker&amp;amp;pastimes%5B3%5D=rap&amp;amp;children%5Bbobby%5D%5Bage%5D=12&amp;amp;\nchildren%5Bbobby%5D%5Bsex%5D=M&amp;amp;children%5Bsally%5D%5Bage%5D=8&amp;amp;\nchildren%5Bsally%5D%5Bsex%5D=F&amp;amp;flags_0=CEO&amp;nbsp;刚好符合curl要求&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;总结，我们要对curl中传递的数组进行处理，使用&lt;/p&gt;&lt;pre&gt;http_build_query（）&lt;/pre&gt;&lt;pre&gt;修改&amp;nbsp;&amp;nbsp;curl_setopt($ch,&amp;nbsp;CURLOPT_POSTFIELDS,&amp;nbsp;http_build_query($data));即可。&lt;/pre&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '39', '小静龙', '1489453663', './Uploads/article/20170314/58c741e6d1e57.jpeg', '1', '0', '4', '1');
INSERT INTO `xjl_article` VALUES ('55', '数据库优化之索引优化', '&lt;p&gt;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span&gt;数据库索引&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;．什么是索引&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在数据库中，索引的含义与日常意义上的“索引”一词并无多大区别（想想小时候查字典），它是用于提高数据库表数据访问速度的数据库对象。&lt;br/&gt;A）索引可以避免全表扫描。多数查询可以仅扫描少量索引页及数据页，而不是遍历所有数据页。&lt;br/&gt;B）对于非聚集索引，有些查询甚至可以不访问数据页。&lt;br/&gt;C）聚集索引可以避免数据插入操作集中于表的最后一个数据页。&lt;br/&gt;D）一些情况下，索引还可用于避免排序操作。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;当然，众所周知，虽然索引可以提高查询速度，但是它们也会导致数据库系统更新数据的性能下降，因为大部分数据更新需要同时更新索引。&lt;/p&gt;&lt;p&gt;例如这样一个查询：select * from table1 where id=44。如果没有索引，必须遍历整个表，直到ID等于44的这一行被找到为止；有了索引之后(必须是在ID这一列上建立的索引)，直接在索引里面找44（也就是在ID这一列找），就可以得知这一行的位置，也就是找到了这一行。可见，索引是用来定位的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;strong&gt;索引的存储&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一条索引记录中包含的基本信息包括：键值（即你定义索引时指定的所有字段的值）+逻辑指针（指向数据页或者另一索引页）。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;img src=&quot;/Uploads/article/20170316/1489629561582028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当你为一张空表创建索引时，数据库系统将为你分配一个索引页，该索引页在你插入数据前一直是空的。此页此时既是根结点，也是叶结点。每当你往表中插入一行数据，数据库系统即向此根结点中插入一行索引记录。当根结点满时，数据库系统大抵按以下步骤进行分裂：&lt;br/&gt;A）创建两个儿子结点&lt;br/&gt;B）将原根结点中的数据近似地拆成两半，分别写入新的两个儿子结点&lt;br/&gt;C）根结点中加上指向两个儿子结点的指针&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;通常状况下，由于索引记录仅包含索引字段值（以及4-9字节的指针），索引实体比真实的数据行要小许多，索引页相较数据页来说要密集许多。一个索引页可以存储数量更多的索引记录，这意味着在索引中查找时在I/O上占很大的优势，理解这一点有助于从本质上了解使用索引的优势。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;．索引的类型&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;A) &amp;nbsp;唯一索引:唯一索引不允许两行具有相同索引值&lt;/p&gt;&lt;p&gt;B) 主键索引:定义一个主键将自动创建主键索引,主键索引是唯一索引的特殊类型.要求每个值唯一的,并且不能为空。&lt;/p&gt;&lt;p&gt;C）聚集索引，表数据按照索引的顺序来存储的。对于聚集索引，叶子结点即存储了真实的数据行，不再有另外单独的数据页，每个表只能一个&lt;/p&gt;&lt;p&gt;D）非聚集索引，表数据存储顺序与索引顺序无关。对于非聚集索引，数据存储在一个位置,索引存储在另一个位置,索引中包含指向数据存储位置的指针。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. 索引创建语法&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;crate&amp;nbsp;[unique](唯一)&amp;nbsp;[clustered](聚集)&amp;nbsp;[nonclustered]&amp;nbsp;index&amp;nbsp;&amp;nbsp;索引名称&amp;nbsp;on&amp;nbsp;表名(列名)&lt;/pre&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;注:以上[]中的值根据需要选择一个&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5.索引删除语法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;drop index 表名.索引名&lt;/p&gt;&lt;p&gt;sysindexes:系统索引表&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6.索引优缺点&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;优点：&lt;/strong&gt;&amp;nbsp;创建索引可以大大提高系统的性能。&lt;br/&gt;　　　　1):通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。&lt;br/&gt;　　　　2):可以大大加快数据的检索速度，这也是创建索引的最主要的原因。&lt;br/&gt;　　　　3):可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。&lt;br/&gt;　　　　4):在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。&lt;br/&gt;　　　　5):通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&amp;nbsp;&lt;strong&gt;缺点：&amp;nbsp;&lt;/strong&gt;1):创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。&lt;br/&gt;　　　　2):索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。&lt;br/&gt;　　　　3):当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;h4&gt;7.在哪建索引&lt;/h4&gt;&lt;p&gt;　　索引是建立在数据库表中的某些列的上面。在创建索引的时候，应该考虑在哪些列上可以创建索引，在哪些列上不能创建索引。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;　　一般来说，应该在这些列上创建索引：&lt;/strong&gt;&lt;br/&gt;　　1):在经常需要搜索的列上，可以加快搜索的速度；&lt;br/&gt;　　2):在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；&lt;br/&gt;　　3):在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；&lt;br/&gt;　　4):在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；&lt;br/&gt;　　5):在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;　　&lt;strong&gt;同样，对于有些列不应该创建索引。一般来说，不应该创建索引的的这些列具有下列特点：&lt;/strong&gt;&lt;br/&gt;　　1):对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。&lt;/p&gt;&lt;p&gt;　　　相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。&lt;br/&gt;　　2):对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，&lt;/p&gt;&lt;p&gt;　　　即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。&lt;br/&gt;　　3):对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少,不利于使用索引。&lt;br/&gt;　　4):当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。&lt;/p&gt;&lt;p&gt;　　　&amp;nbsp;当减少索引时，会提高修改性能，降低检索性能。因此，当修改操作远远多于检索操作时，不应该创建索引。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '42', '小静龙', '1489629664', './Uploads/article/20170316/58c9f1d69d1f0.jpeg', '1', '0', '1', '1');
INSERT INTO `xjl_article` VALUES ('63', 'dfsgdfsg', '&lt;p&gt;dsfgsdfgdsgd&lt;/p&gt;', '39', '小静龙', '1491470797', './Uploads/article/20170406/58e609b361dff_thumb.jpeg', '1', '0', '1', '1');
INSERT INTO `xjl_article` VALUES ('64', 'sdfsdfdsf', '&lt;p&gt;sdfsdfdssdfsdfsdf&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962123772.jpg&quot; title=&quot;1491470962123772.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962578906.jpg&quot; title=&quot;1491470962578906.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962130347.jpg&quot; title=&quot;1491470962130347.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962116568.jpg&quot; title=&quot;1491470962116568.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962608254.jpg&quot; title=&quot;1491470962608254.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962903882.jpg&quot; title=&quot;1491470962903882.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962174321.jpg&quot; title=&quot;1491470962174321.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962224195.jpg&quot; title=&quot;1491470962224195.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962949410.jpg&quot; title=&quot;1491470962949410.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/Uploads/article/20170406/1491470962592332.jpg&quot; title=&quot;1491470962592332.jpg&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;', '39', '小静龙', '1491470965', './Uploads/article/20170406/58e60a5c09b2a_thumb.jpeg', '1', '0', '1', '1');

-- ----------------------------
-- Table structure for `xjl_article_comment`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_article_comment`;
CREATE TABLE `xjl_article_comment` (
  `cid` int(10) NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `aid` int(10) NOT NULL COMMENT '文章id',
  `content` text NOT NULL,
  `headimg` varchar(100) NOT NULL,
  `time` int(10) NOT NULL COMMENT '评论时间',
  `ip` varchar(32) NOT NULL COMMENT '用户ip',
  PRIMARY KEY (`cid`),
  KEY `aid` (`aid`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of xjl_article_comment
-- ----------------------------
INSERT INTO `xjl_article_comment` VALUES ('1', '47', '不错的文章！！！&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/2.gif', '1472612965', '122.87.145.123');
INSERT INTO `xjl_article_comment` VALUES ('2', '48', '&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/2.gif', '1472614063', '122.87.145.123');
INSERT INTO `xjl_article_comment` VALUES ('3', '49', '&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/3.gif', '1472628232', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('4', '49', '&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/3.gif', '1472628300', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('5', '49', '不错！', './Public/headimg/5.gif', '1472628427', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('6', '49', '&lt;img src=&quot;/Public/faceimg/cai.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/cai.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/cai.gif&quot;&gt;', './Public/headimg/2.gif', '1472631529', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('7', '49', '非常好的文章！&lt;img src=&quot;/Public/faceimg/ok.gif&quot;&gt;', './Public/headimg/4.gif', '1472631693', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('8', '49', '很实用', './Public/headimg/6.gif', '1472631767', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('9', '48', 'redis现在很火！', './Public/headimg/3.gif', '1472633314', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('10', '48', '哈哈 不错的文章&lt;br&gt;&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/5.gif', '1472633356', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('11', '48', '学习了', './Public/headimg/3.gif', '1472633379', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('12', '48', 'redis比memcached强大', './Public/headimg/1.gif', '1472633417', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('13', '48', '来过了', './Public/headimg/3.gif', '1472633430', '122.87.145.126');
INSERT INTO `xjl_article_comment` VALUES ('14', '50', '安装 成功了 感谢博主！&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/4.gif', '1472769903', '101.47.17.27');
INSERT INTO `xjl_article_comment` VALUES ('15', '47', '程序猿&lt;img src=&quot;/Public/faceimg/touxiao.gif&quot;&gt;', './Public/headimg/5.gif', '1472769970', '101.47.17.27');
INSERT INTO `xjl_article_comment` VALUES ('16', '50', '&lt;img src=&quot;/Public/faceimg/daxiao.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/2.gif', '1472999755', '101.47.17.27');
INSERT INTO `xjl_article_comment` VALUES ('17', '48', '&lt;img src=&quot;/Public/faceimg/buxing.gif&quot;&gt;', './Public/headimg/2.gif', '1473311370', '122.87.144.83');
INSERT INTO `xjl_article_comment` VALUES ('18', '50', '&lt;img src=&quot;/Public/faceimg/baiyan.gif&quot;&gt;', './Public/headimg/4.gif', '1473311397', '122.87.144.83');
INSERT INTO `xjl_article_comment` VALUES ('19', '50', '详细&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/3.gif', '1473816457', '122.87.144.53');
INSERT INTO `xjl_article_comment` VALUES ('20', '50', '&lt;img src=&quot;/Public/faceimg/baiyan.gif&quot;&gt;', './Public/headimg/4.gif', '1475161771', '115.181.98.27');
INSERT INTO `xjl_article_comment` VALUES ('21', '51', '&lt;img src=&quot;/Public/faceimg/hua.gif&quot;&gt;', './Public/headimg/4.gif', '1476070280', '60.176.170.31');
INSERT INTO `xjl_article_comment` VALUES ('22', '51', '&lt;img src=&quot;/Public/faceimg/baiyan.gif&quot;&gt;', './Public/headimg/6.gif', '1476759603', '115.195.47.140');
INSERT INTO `xjl_article_comment` VALUES ('23', '52', '&lt;img src=&quot;/Public/faceimg/xiao.gif&quot;&gt;', './Public/headimg/2.gif', '1477451739', '115.192.219.103');
INSERT INTO `xjl_article_comment` VALUES ('24', '50', '&lt;img src=&quot;/Public/faceimg/baibai.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/piezui.gif&quot;&gt;', './Public/headimg/2.gif', '1479448328', '183.157.81.184');
INSERT INTO `xjl_article_comment` VALUES ('25', '47', 'dfdf&lt;img src=&quot;/Public/faceimg/baibai.gif&quot;&gt;', './Public/headimg/5.gif', '1482230258', '183.157.82.158');
INSERT INTO `xjl_article_comment` VALUES ('26', '48', '&lt;img src=&quot;/Public/faceimg/baiyan.gif&quot;&gt;', './Public/headimg/4.gif', '1482998258', '122.235.234.236');
INSERT INTO `xjl_article_comment` VALUES ('27', '52', '&lt;img src=&quot;/Public/faceimg/baiyan.gif&quot;&gt;', './Public/headimg/5.gif', '1483518844', '122.233.199.147');
INSERT INTO `xjl_article_comment` VALUES ('28', '51', '&lt;img src=&quot;/Public/faceimg/cai.gif&quot;&gt;', './Public/headimg/3.gif', '1484277900', '125.119.207.73');
INSERT INTO `xjl_article_comment` VALUES ('29', '51', '&lt;img src=&quot;/Public/faceimg/taiyang.gif&quot;&gt;', './Public/headimg/5.gif', '1484277915', '125.119.207.73');
INSERT INTO `xjl_article_comment` VALUES ('30', '47', '&lt;img src=&quot;/Public/faceimg/buxing.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/buxing.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/buxing.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/buxing.gif&quot;&gt;', './Public/headimg/2.gif', '1487214920', '115.195.131.223');
INSERT INTO `xjl_article_comment` VALUES ('31', '47', '&lt;img src=&quot;/Public/faceimg/baibai.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/baibai.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/baibai.gif&quot;&gt;&lt;img src=&quot;/Public/faceimg/baibai.gif&quot;&gt;', './Public/headimg/5.gif', '1487214927', '115.195.131.223');
INSERT INTO `xjl_article_comment` VALUES ('32', '53', '&lt;img src=&quot;/Public/faceimg/xiao.gif&quot;&gt;&amp;nbsp;不错哦！', './Public/headimg/1.gif', '1489286729', '101.47.19.222');
INSERT INTO `xjl_article_comment` VALUES ('33', '54', '解决了问题 哈哈哈&lt;img src=&quot;/Public/faceimg/fule.gif&quot;&gt;', './Public/headimg/3.gif', '1489453736', '122.233.195.1');
INSERT INTO `xjl_article_comment` VALUES ('34', '54', '不错的文章&lt;img src=&quot;/Public/faceimg/zan.gif&quot;&gt;', './Public/headimg/4.gif', '1489453793', '122.233.195.1');
INSERT INTO `xjl_article_comment` VALUES ('35', '53', '&lt;img src=&quot;/Public/faceimg/xiao.gif&quot;&gt;', './Public/headimg/1.gif', '1489539388', '122.233.195.1');
INSERT INTO `xjl_article_comment` VALUES ('36', '54', '&lt;img src=&quot;/Public/faceimg/baiyan.gif&quot;&gt;', './Public/headimg/3.gif', '1490279344', '101.47.19.172');
INSERT INTO `xjl_article_comment` VALUES ('37', '48', '&lt;img src=&quot;/Public/faceimg/yiwen.gif&quot;&gt;', './Public/headimg/2.gif', '1490793655', '101.47.19.137');

-- ----------------------------
-- Table structure for `xjl_category`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_category`;
CREATE TABLE `xjl_category` (
  `cid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cname` varchar(20) CHARACTER SET utf8 NOT NULL,
  `description` varchar(155) CHARACTER SET utf8 NOT NULL,
  `isopen` int(1) NOT NULL DEFAULT '0',
  `sort` int(10) NOT NULL,
  `parentid` int(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of xjl_category
-- ----------------------------
INSERT INTO `xjl_category` VALUES ('33', 'javascript', 'javascript', '1', '3', '0');
INSERT INTO `xjl_category` VALUES ('39', 'php', 'php', '1', '0', '0');
INSERT INTO `xjl_category` VALUES ('41', '服务器', '服务器', '1', '1', '0');
INSERT INTO `xjl_category` VALUES ('42', 'mysql', 'mysql数据库', '1', '0', '0');
INSERT INTO `xjl_category` VALUES ('43', '慢生活', '慢生活', '1', '1', '0');

-- ----------------------------
-- Table structure for `xjl_member`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_member`;
CREATE TABLE `xjl_member` (
  `uid` int(10) NOT NULL AUTO_INCREMENT,
  `uname` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `age` smallint(3) NOT NULL DEFAULT '0',
  `address` varchar(100) CHARACTER SET utf8 DEFAULT NULL,
  `phone` varchar(20) CHARACTER SET utf8 DEFAULT NULL,
  `ctime` datetime NOT NULL,
  `ltime` datetime DEFAULT NULL,
  `openid` varchar(50) CHARACTER SET utf8 NOT NULL,
  `ip` varchar(20) CHARACTER SET utf8 DEFAULT NULL,
  `userphoto` varchar(300) CHARACTER SET utf8 DEFAULT NULL,
  PRIMARY KEY (`uid`),
  KEY `openid` (`openid`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Records of xjl_member
-- ----------------------------
INSERT INTO `xjl_member` VALUES ('12', '小静龙', '0', null, null, '2016-03-24 16:34:21', null, 'EA4B41D5C2D351694267C94FC89BEC95', '122.87.145.91', 'http://q.qlogo.cn/qqapp/101290967/EA4B41D5C2D351694267C94FC89BEC95/40');
INSERT INTO `xjl_member` VALUES ('13', '我爱租', '0', null, null, '2016-03-24 16:39:13', null, 'BC0A26EBF84F2742B089216C26662EB8', '122.87.145.91', 'http://q.qlogo.cn/qqapp/101290967/BC0A26EBF84F2742B089216C26662EB8/40');
INSERT INTO `xjl_member` VALUES ('14', 'Alisa', '0', null, null, '2016-03-24 16:39:23', null, '04D29B0A8F5D09A9EEFB7DA6C29F68EE', '183.128.160.206', 'http://q.qlogo.cn/qqapp/101290967/04D29B0A8F5D09A9EEFB7DA6C29F68EE/40');
INSERT INTO `xjl_member` VALUES ('15', '精兵《~~~》', '0', null, null, '2016-03-24 16:39:27', null, 'C2C36D18F7BF783F475483F66E23EC0B', '122.87.145.91', 'http://q.qlogo.cn/qqapp/101290967/C2C36D18F7BF783F475483F66E23EC0B/40');
INSERT INTO `xjl_member` VALUES ('16', '淘宝控价-语佳', '0', null, null, '2016-03-24 16:40:20', null, '9947CCCD884E40DB569E99D6A568E694', '183.128.160.206', 'http://q.qlogo.cn/qqapp/101290967/9947CCCD884E40DB569E99D6A568E694/40');
INSERT INTO `xjl_member` VALUES ('17', '❤韚濕獪', '0', null, null, '2016-03-25 15:00:46', null, '16B64D84E3B4805E46A8E0DD916B9DB6', '101.231.38.122', 'http://q.qlogo.cn/qqapp/101290967/16B64D84E3B4805E46A8E0DD916B9DB6/40');
INSERT INTO `xjl_member` VALUES ('18', 'With you 士兵/jianyi', '0', null, null, '2016-03-25 16:44:08', null, 'F21B5F759E1E1EA89F35C37EE6E8787B', '111.198.128.72', 'http://q.qlogo.cn/qqapp/101290967/F21B5F759E1E1EA89F35C37EE6E8787B/40');
INSERT INTO `xjl_member` VALUES ('19', '%40%F0%9F%8E%88...', '0', null, null, '2016-05-20 14:51:12', null, '89F69467A35407837AD67296C6EE76CB', '122.87.146.26', 'http://q.qlogo.cn/qqapp/101290967/89F69467A35407837AD67296C6EE76CB/40');

-- ----------------------------
-- Table structure for `xjl_node`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_node`;
CREATE TABLE `xjl_node` (
  `id` smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `title` varchar(50) DEFAULT NULL,
  `status` tinyint(1) DEFAULT '0',
  `remark` varchar(255) DEFAULT NULL,
  `sort` smallint(6) unsigned DEFAULT NULL,
  `pid` smallint(6) unsigned NOT NULL,
  `level` tinyint(1) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `level` (`level`),
  KEY `pid` (`pid`),
  KEY `status` (`status`),
  KEY `name` (`name`)
) ENGINE=MyISAM AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of xjl_node
-- ----------------------------
INSERT INTO `xjl_node` VALUES ('1', 'Adxjl', '后台应用', '1', '后台应用', '1', '0', '1');
INSERT INTO `xjl_node` VALUES ('2', 'Home', '前台应用', '1', '前台应用', '1', '0', '1');
INSERT INTO `xjl_node` VALUES ('3', 'Rbac', '访问控制', '1', '访问控制', '2', '1', '2');
INSERT INTO `xjl_node` VALUES ('4', 'Login', '登录', '1', '登录', '1', '1', '2');
INSERT INTO `xjl_node` VALUES ('5', 'Article', '文章管理', '1', '文章管理', '1', '1', '2');
INSERT INTO `xjl_node` VALUES ('6', 'login', '登录', '1', '登录', '1', '4', '3');
INSERT INTO `xjl_node` VALUES ('7', 'code', '验证码', '1', '验证码', '1', '4', '3');
INSERT INTO `xjl_node` VALUES ('8', 'handle', '登录处理', '1', '登录处理', '1', '4', '3');
INSERT INTO `xjl_node` VALUES ('9', 'article', '文章列表', '1', '文章列表', '1', '5', '3');
INSERT INTO `xjl_node` VALUES ('10', 'addArticle', '添加文章', '1', '添加文章', '2', '5', '3');
INSERT INTO `xjl_node` VALUES ('11', 'addArticleHandle', '文章处理', '1', '文章处理', '3', '5', '3');
INSERT INTO `xjl_node` VALUES ('12', 'articleDetail', '文章详情', '1', '文章详情', '4', '5', '3');
INSERT INTO `xjl_node` VALUES ('13', 'editArticle', '编辑文章', '1', '编辑文章', '4', '5', '3');
INSERT INTO `xjl_node` VALUES ('14', 'delete', '删除文章', '1', '删除文章', '5', '5', '3');
INSERT INTO `xjl_node` VALUES ('15', 'upimg', '上传图片', '1', '上传图片', '6', '5', '3');
INSERT INTO `xjl_node` VALUES ('16', 'base64_to_img', '数据转换', '1', '数据转换', '6', '5', '3');
INSERT INTO `xjl_node` VALUES ('17', 'imgcrup', '图片裁剪', '1', '图片裁剪', '7', '5', '3');
INSERT INTO `xjl_node` VALUES ('18', 'user', '用户列表', '1', '用户列表', '1', '3', '3');
INSERT INTO `xjl_node` VALUES ('19', 'addUser', '添加用户', '1', '添加用户', '2', '3', '3');
INSERT INTO `xjl_node` VALUES ('20', 'node', '节点列表', '1', '节点列表', '3', '3', '3');
INSERT INTO `xjl_node` VALUES ('21', 'addNode', '添加节点', '1', '添加节点', '4', '3', '3');
INSERT INTO `xjl_node` VALUES ('22', 'role', '角色列表', '1', '角色列表', '5', '3', '3');
INSERT INTO `xjl_node` VALUES ('23', 'addRole', '添加角色', '1', '添加角色', '5', '3', '3');
INSERT INTO `xjl_node` VALUES ('24', 'Category', '分类管理', '1', '分类管理', '1', '1', '2');
INSERT INTO `xjl_node` VALUES ('25', 'category', '分类列表', '1', '分类列表', '1', '24', '3');
INSERT INTO `xjl_node` VALUES ('26', 'addCategory', '添加分类', '1', '添加分类', '2', '24', '3');
INSERT INTO `xjl_node` VALUES ('27', 'addCategoryHandle', '添加分类处理', '1', '添加分类处理', '3', '24', '3');
INSERT INTO `xjl_node` VALUES ('28', 'categoryDetail', '分类详情', '1', '分类详情', '4', '24', '3');
INSERT INTO `xjl_node` VALUES ('29', 'editCategory', '编辑分类', '1', '编辑分类', '6', '24', '3');
INSERT INTO `xjl_node` VALUES ('30', 'delete', '删除分类', '1', '删除分类', '7', '24', '3');
INSERT INTO `xjl_node` VALUES ('31', 'Index', '首页', '1', '首页', '1', '2', '2');
INSERT INTO `xjl_node` VALUES ('32', 'Index', '后台首页', '1', '后台首页', '1', '1', '2');
INSERT INTO `xjl_node` VALUES ('33', 'index', '首页方法', '1', '首页方法', '1', '32', '3');
INSERT INTO `xjl_node` VALUES ('34', 'access', '配置权限', '1', '配置权限', '1', '3', '3');
INSERT INTO `xjl_node` VALUES ('35', 'accessControl', '权限处理', '1', '权限处理', '2', '3', '3');

-- ----------------------------
-- Table structure for `xjl_role`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_role`;
CREATE TABLE `xjl_role` (
  `id` smallint(6) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `pid` smallint(6) DEFAULT NULL,
  `status` tinyint(1) unsigned DEFAULT NULL,
  `remark` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `pid` (`pid`),
  KEY `status` (`status`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of xjl_role
-- ----------------------------
INSERT INTO `xjl_role` VALUES ('1', '超级管理员', null, '1', '超级管理员');
INSERT INTO `xjl_role` VALUES ('2', '普通管理员', null, '1', '普通管理员');
INSERT INTO `xjl_role` VALUES ('3', '网站编辑', null, '1', '网站编辑');

-- ----------------------------
-- Table structure for `xjl_role_user`
-- ----------------------------
DROP TABLE IF EXISTS `xjl_role_user`;
CREATE TABLE `xjl_role_user` (
  `role_id` mediumint(9) unsigned DEFAULT NULL,
  `user_id` char(32) DEFAULT NULL,
  KEY `group_id` (`role_id`),
  KEY `user_id` (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of xjl_role_user
-- ----------------------------
INSERT INTO `xjl_role_user` VALUES ('3', '3');
INSERT INTO `xjl_role_user` VALUES ('3', '2');
INSERT INTO `xjl_role_user` VALUES ('3', '4');
INSERT INTO `xjl_role_user` VALUES ('1', '1');
INSERT INTO `xjl_role_user` VALUES ('2', '1');
INSERT INTO `xjl_role_user` VALUES ('3', '1');
INSERT INTO `xjl_role_user` VALUES ('2', '2');
INSERT INTO `xjl_role_user` VALUES ('2', '3');
